
Batter_monitor_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fac  08007fac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb4  08007fb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  20000070  0800802c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0800802c  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001943e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003324  00000000  00000000  000394de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003c808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf4e  00000000  00000000  0003f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b10  00000000  00000000  0006b11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010615e  00000000  00000000  00084c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ad8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006570  00000000  00000000  0018addc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ce8 	.word	0x08007ce8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007ce8 	.word	0x08007ce8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <DEV_SPI_WriteByte>:
******************************************************************************/
#include "DEV_Config.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000eb6:	1df9      	adds	r1, r7, #7
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <DEV_SPI_WriteByte+0x20>)
 8000ec0:	f004 fa9b 	bl	80053fa <HAL_SPI_Transmit>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000188 	.word	0x20000188

08000ed0 <EPD_2IN66_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN66_Reset(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f001 fc70 	bl	80027c0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8000ee0:	20c8      	movs	r0, #200	; 0xc8
 8000ee2:	f001 f96d 	bl	80021c0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2101      	movs	r1, #1
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f001 fc67 	bl	80027c0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f001 f964 	bl	80021c0 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f001 fc5e 	bl	80027c0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8000f04:	20c8      	movs	r0, #200	; 0xc8
 8000f06:	f001 f95b 	bl	80021c0 <HAL_Delay>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <EPD_2IN66_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN66_SendCommand(UBYTE Reg)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 fc4e 	bl	80027c0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f001 fc48 	bl	80027c0 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffba 	bl	8000eac <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f001 fc3e 	bl	80027c0 <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <EPD_2IN66_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN66_SendData(UBYTE Data)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2104      	movs	r1, #4
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f001 fc2f 	bl	80027c0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f001 fc29 	bl	80027c0 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff9b 	bl	8000eac <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 fc1f 	bl	80027c0 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <EPD_2IN66_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN66_ReadBusy(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <EPD_2IN66_ReadBusy+0x38>)
 8000f92:	f005 fd27 	bl	80069e4 <puts>
    DEV_Delay_ms(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f001 f912 	bl	80021c0 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8000f9c:	e002      	b.n	8000fa4 <EPD_2IN66_ReadBusy+0x18>
        DEV_Delay_ms(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f001 f90e 	bl	80021c0 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f001 fbf1 	bl	8002790 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d0f4      	beq.n	8000f9e <EPD_2IN66_ReadBusy+0x12>
    }
    DEV_Delay_ms(100);
 8000fb4:	2064      	movs	r0, #100	; 0x64
 8000fb6:	f001 f903 	bl	80021c0 <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <EPD_2IN66_ReadBusy+0x3c>)
 8000fbc:	f005 fd12 	bl	80069e4 <puts>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08007d00 	.word	0x08007d00
 8000fc8:	08007d18 	.word	0x08007d18

08000fcc <EPD_2IN66_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN66_TurnOnDisplay(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    EPD_2IN66_SendCommand(0x20);
 8000fd0:	2020      	movs	r0, #32
 8000fd2:	f7ff ff9c 	bl	8000f0e <EPD_2IN66_SendCommand>
    EPD_2IN66_ReadBusy();
 8000fd6:	f7ff ffd9 	bl	8000f8c <EPD_2IN66_ReadBusy>

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <EPD_2IN66_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN66_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
    EPD_2IN66_Reset();
 8000fe2:	f7ff ff75 	bl	8000ed0 <EPD_2IN66_Reset>
    EPD_2IN66_ReadBusy();
 8000fe6:	f7ff ffd1 	bl	8000f8c <EPD_2IN66_ReadBusy>
    EPD_2IN66_SendCommand(0x12);//soft  reset
 8000fea:	2012      	movs	r0, #18
 8000fec:	f7ff ff8f 	bl	8000f0e <EPD_2IN66_SendCommand>
    EPD_2IN66_ReadBusy();
 8000ff0:	f7ff ffcc 	bl	8000f8c <EPD_2IN66_ReadBusy>
	/*	Y increment, X increment	*/
	EPD_2IN66_SendCommand(0x11);
 8000ff4:	2011      	movs	r0, #17
 8000ff6:	f7ff ff8a 	bl	8000f0e <EPD_2IN66_SendCommand>
	EPD_2IN66_SendData(0x03);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f7ff ffa6 	bl	8000f4c <EPD_2IN66_SendData>
	/*	Set RamX-address Start/End position	*/
	EPD_2IN66_SendCommand(0x44);
 8001000:	2044      	movs	r0, #68	; 0x44
 8001002:	f7ff ff84 	bl	8000f0e <EPD_2IN66_SendCommand>
	EPD_2IN66_SendData(0x01);
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff ffa0 	bl	8000f4c <EPD_2IN66_SendData>
	EPD_2IN66_SendData((EPD_2IN66_WIDTH % 8 == 0)? (EPD_2IN66_WIDTH / 8 ): (EPD_2IN66_WIDTH / 8 + 1) );
 800100c:	2013      	movs	r0, #19
 800100e:	f7ff ff9d 	bl	8000f4c <EPD_2IN66_SendData>
	/*	Set RamY-address Start/End position	*/
	EPD_2IN66_SendCommand(0x45);
 8001012:	2045      	movs	r0, #69	; 0x45
 8001014:	f7ff ff7b 	bl	8000f0e <EPD_2IN66_SendCommand>
	EPD_2IN66_SendData(0);
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff ff97 	bl	8000f4c <EPD_2IN66_SendData>
	EPD_2IN66_SendData(0);
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ff94 	bl	8000f4c <EPD_2IN66_SendData>
	EPD_2IN66_SendData((EPD_2IN66_HEIGHT&0xff));
 8001024:	2028      	movs	r0, #40	; 0x28
 8001026:	f7ff ff91 	bl	8000f4c <EPD_2IN66_SendData>
	EPD_2IN66_SendData((EPD_2IN66_HEIGHT&0x100)>>8);
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ff8e 	bl	8000f4c <EPD_2IN66_SendData>


	EPD_2IN66_ReadBusy();
 8001030:	f7ff ffac 	bl	8000f8c <EPD_2IN66_ReadBusy>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <EPD_2IN66_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN66_Clear(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_2IN66_WIDTH % 8 == 0)? (EPD_2IN66_WIDTH / 8 ): (EPD_2IN66_WIDTH / 8 + 1);
 800103e:	2313      	movs	r3, #19
 8001040:	807b      	strh	r3, [r7, #2]
    Height = EPD_2IN66_HEIGHT;
 8001042:	f44f 7394 	mov.w	r3, #296	; 0x128
 8001046:	803b      	strh	r3, [r7, #0]
    EPD_2IN66_SendCommand(0x24);
 8001048:	2024      	movs	r0, #36	; 0x24
 800104a:	f7ff ff60 	bl	8000f0e <EPD_2IN66_SendCommand>
    for (UWORD j = 0; j <=Height; j++) {
 800104e:	2300      	movs	r3, #0
 8001050:	80fb      	strh	r3, [r7, #6]
 8001052:	e00f      	b.n	8001074 <EPD_2IN66_Clear+0x3c>
        for (UWORD i = 0; i < Width; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	80bb      	strh	r3, [r7, #4]
 8001058:	e005      	b.n	8001066 <EPD_2IN66_Clear+0x2e>
            EPD_2IN66_SendData(0xff);
 800105a:	20ff      	movs	r0, #255	; 0xff
 800105c:	f7ff ff76 	bl	8000f4c <EPD_2IN66_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	3301      	adds	r3, #1
 8001064:	80bb      	strh	r3, [r7, #4]
 8001066:	88ba      	ldrh	r2, [r7, #4]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3f5      	bcc.n	800105a <EPD_2IN66_Clear+0x22>
    for (UWORD j = 0; j <=Height; j++) {
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	3301      	adds	r3, #1
 8001072:	80fb      	strh	r3, [r7, #6]
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	883b      	ldrh	r3, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d9eb      	bls.n	8001054 <EPD_2IN66_Clear+0x1c>
        }
    }
    EPD_2IN66_TurnOnDisplay();
 800107c:	f7ff ffa6 	bl	8000fcc <EPD_2IN66_TurnOnDisplay>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b098      	sub	sp, #96	; 0x60
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f001 f822 	bl	80020d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f911 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fa6f 	bl	8001578 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800109a:	f000 f9ab 	bl	80013f4 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800109e:	f000 fa3d 	bl	800151c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80010a2:	f000 f967 	bl	8001374 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010a6:	f000 f9fb 	bl	80014a0 <MX_SPI1_Init>
  MX_RTC_Init();
 80010aa:	f000 f9d1 	bl	8001450 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  BQ76940_get_register(ADCGAIN_REG, buf_ADC_gain);
 80010ae:	2250      	movs	r2, #80	; 0x50
 80010b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f000 fb52 	bl	8001760 <BQ76940_get_register>
  BQ76940_get_register(ADCOFFSET_REG, buf_ADC_offset);
 80010bc:	2251      	movs	r2, #81	; 0x51
 80010be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f000 fb4b 	bl	8001760 <BQ76940_get_register>
  BQ76940_set_register(SYS_CTRL1_REG, 0x08u);	//Enable temperature measurements (TEMP_SEL = 1)
 80010ca:	2304      	movs	r3, #4
 80010cc:	2108      	movs	r1, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fb14 	bl	80016fc <BQ76940_set_register>
  BQ76940_set_register(SYS_CTRL2_REG, 0x40u);	//Enable CC ALWAYS ON mode (CC_EN = 1)
 80010d4:	2305      	movs	r3, #5
 80010d6:	2140      	movs	r1, #64	; 0x40
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fb0f 	bl	80016fc <BQ76940_set_register>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);	//Set SPI CS pin high PA6
 80010de:	2201      	movs	r2, #1
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 fb6b 	bl	80027c0 <HAL_GPIO_WritePin>
  EPD_2IN66_Init();	//Initialize the E-paper display
 80010ea:	f7ff ff78 	bl	8000fde <EPD_2IN66_Init>
  EPD_2IN66_Clear();
 80010ee:	f7ff ffa3 	bl	8001038 <EPD_2IN66_Clear>
  adc_gain = (buf_ADC_gain[0]*(10*exp(-6)));
 80010f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa1c 	bl	8000534 <__aeabi_i2d>
 80010fc:	a36a      	add	r3, pc, #424	; (adr r3, 80012a8 <main+0x220>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f7ff fa81 	bl	8000608 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fd2b 	bl	8000b68 <__aeabi_d2uiz>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  adc_offset = (buf_ADC_offset[0]*(10*exp(-3)));
 8001118:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa09 	bl	8000534 <__aeabi_i2d>
 8001122:	a363      	add	r3, pc, #396	; (adr r3, 80012b0 <main+0x228>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa6e 	bl	8000608 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd18 	bl	8000b68 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

  //Initial error checking for the SYS_STAT register.
  BQ76940_get_register(SYS_STAT_REG, buf_ALERT_stat);
 800113e:	2200      	movs	r2, #0
 8001140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f000 fb0a 	bl	8001760 <BQ76940_get_register>
  for(int i = 0; i<sizeof(buf_ALERT_stat); i++){
 800114c:	2300      	movs	r3, #0
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
 8001150:	e017      	b.n	8001182 <main+0xfa>
	  if(buf_ALERT_stat[i] != 0x00u){
 8001152:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00d      	beq.n	800117c <main+0xf4>
		  printf("%d ", buf_ALERT_stat[i]);
 8001160:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	4848      	ldr	r0, [pc, #288]	; (8001290 <main+0x208>)
 800116e:	f005 fbb3 	bl	80068d8 <iprintf>
		  BQ76940_set_register(SYS_STAT_REG, 0xFFu);
 8001172:	2300      	movs	r3, #0
 8001174:	21ff      	movs	r1, #255	; 0xff
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fac0 	bl	80016fc <BQ76940_set_register>
  for(int i = 0; i<sizeof(buf_ALERT_stat); i++){
 800117c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800117e:	3301      	adds	r3, #1
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
 8001182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001184:	2b07      	cmp	r3, #7
 8001186:	d9e4      	bls.n	8001152 <main+0xca>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8001188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118c:	f001 f818 	bl	80021c0 <HAL_Delay>
	  //Get each cell reading from their respective registers and store the voltage according to ADC gain and offset.
	  for(size_t i = 0; i<sizeof(buf_cell_volt); i++)
 8001190:	2300      	movs	r3, #0
 8001192:	653b      	str	r3, [r7, #80]	; 0x50
 8001194:	e033      	b.n	80011fe <main+0x176>
	  {
		  cell_volt = BQ76940_get_HILO_register(VC1_HI_REG + (i*2), buf_cell_volt);
 8001196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001198:	b2db      	uxtb	r3, r3
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	220c      	movs	r2, #12
 80011a0:	4413      	add	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f107 0220 	add.w	r2, r7, #32
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fb08 	bl	80017c0 <BQ76940_get_HILO_register>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		  cell_volt = ((adc_gain * cell_volt)+adc_offset);
 80011b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80011c0:	fb12 f303 	smulbb	r3, r2, r3
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		  printf("Cell %d voltage: %d\n", i, cell_volt);
 80011d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011d6:	461a      	mov	r2, r3
 80011d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80011da:	482e      	ldr	r0, [pc, #184]	; (8001294 <main+0x20c>)
 80011dc:	f005 fb7c 	bl	80068d8 <iprintf>

		  //calculate pack total voltage from individual cell voltages
		  pack_voltage += cell_volt;
 80011e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	  for(size_t i = 0; i<sizeof(buf_cell_volt); i++)
 80011f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011fa:	3301      	adds	r3, #1
 80011fc:	653b      	str	r3, [r7, #80]	; 0x50
 80011fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d9c8      	bls.n	8001196 <main+0x10e>
	  }
	  printf("Total cell voltage: %d\n", (int)pack_voltage);
 8001204:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 1a90 	vmov	r1, s15
 8001210:	4821      	ldr	r0, [pc, #132]	; (8001298 <main+0x210>)
 8001212:	f005 fb61 	bl	80068d8 <iprintf>

	  //get the equivalent temperature resistance value
	  temp = BQ76940_get_HILO_register(TS1_HI_REG, buf_temp);
 8001216:	222c      	movs	r2, #44	; 0x2c
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4610      	mov	r0, r2
 8001220:	f000 face 	bl	80017c0 <BQ76940_get_HILO_register>
 8001224:	4603      	mov	r3, r0
 8001226:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  printf("Temperature: %d\n", temp);
 800122a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <main+0x214>)
 8001232:	f005 fb51 	bl	80068d8 <iprintf>

	  //get the pack current value
	  current = BQ76940_get_HILO_register(CC_HI_REG, buf_current);
 8001236:	2232      	movs	r2, #50	; 0x32
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f000 fabf 	bl	80017c0 <BQ76940_get_HILO_register>
 8001242:	4603      	mov	r3, r0
 8001244:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  printf("Pack current: %d\n", current);
 8001248:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800124c:	4619      	mov	r1, r3
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <main+0x218>)
 8001250:	f005 fb42 	bl	80068d8 <iprintf>
	  /*
	   * 	While the current is below acceptable threshold
	   * 	put BQ into ship mode, MCU in low power mode and
	   * 	measure current every minute.
	   */
	  while(current < 100){
 8001254:	e014      	b.n	8001280 <main+0x1f8>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);						//Reset BQ BOOT pin.
 8001256:	2102      	movs	r1, #2
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <main+0x21c>)
 800125a:	f001 fac9 	bl	80027f0 <HAL_GPIO_TogglePin>
		  BQ76940_SHIPMODE();											//Enter BQ low power ship mode.
 800125e:	f000 fb93 	bl	8001988 <BQ76940_SHIPMODE>
		  STM32L432KB_LP_STOP2();										//Enter MCU low power STOP2 mode. Implement this in function.
 8001262:	f000 fbdb 	bl	8001a1c <STM32L432KB_LP_STOP2>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);						//Set BQ BOOT pin to enter normal mode.
 8001266:	2102      	movs	r1, #2
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <main+0x21c>)
 800126a:	f001 fac1 	bl	80027f0 <HAL_GPIO_TogglePin>
		  current = BQ76940_get_HILO_register(CC_HI_REG, buf_current);	//Get current measurement.
 800126e:	2232      	movs	r2, #50	; 0x32
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4610      	mov	r0, r2
 8001276:	f000 faa3 	bl	80017c0 <BQ76940_get_HILO_register>
 800127a:	4603      	mov	r3, r0
 800127c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  while(current < 100){
 8001280:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001284:	2b63      	cmp	r3, #99	; 0x63
 8001286:	d9e6      	bls.n	8001256 <main+0x1ce>
	  HAL_Delay(1000);
 8001288:	e77e      	b.n	8001188 <main+0x100>
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	08007d38 	.word	0x08007d38
 8001294:	08007d3c 	.word	0x08007d3c
 8001298:	08007d54 	.word	0x08007d54
 800129c:	08007d6c 	.word	0x08007d6c
 80012a0:	08007d80 	.word	0x08007d80
 80012a4:	48000400 	.word	0x48000400
 80012a8:	6d58ca0c 	.word	0x6d58ca0c
 80012ac:	3f9961e6 	.word	0x3f9961e6
 80012b0:	00025cdb 	.word	0x00025cdb
 80012b4:	3fdfdd1d 	.word	0x3fdfdd1d

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b096      	sub	sp, #88	; 0x58
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	2244      	movs	r2, #68	; 0x44
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 fafe 	bl	80068c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	463b      	mov	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012de:	f002 fa1b 	bl	8003718 <HAL_PWREx_ControlVoltageScaling>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012e8:	f000 fbda 	bl	8001aa0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012ec:	f002 f9f6 	bl	80036dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <SystemClock_Config+0xb8>)
 80012f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <SystemClock_Config+0xb8>)
 80012f8:	f023 0318 	bic.w	r3, r3, #24
 80012fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001300:	231e      	movs	r3, #30
 8001302:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2340      	movs	r3, #64	; 0x40
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001316:	2301      	movs	r3, #1
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800131e:	2360      	movs	r3, #96	; 0x60
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fa96 	bl	800385c <HAL_RCC_OscConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001336:	f000 fbb3 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133a:	230f      	movs	r3, #15
 800133c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800133e:	2301      	movs	r3, #1
 8001340:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fe9b 	bl	8004090 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001360:	f000 fb9e 	bl	8001aa0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001364:	f003 fbb4 	bl	8004ad0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001368:	bf00      	nop
 800136a:	3758      	adds	r7, #88	; 0x58
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000

08001374 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_I2C1_Init+0x74>)
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <MX_I2C1_Init+0x78>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_I2C1_Init+0x74>)
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <MX_I2C1_Init+0x7c>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_I2C1_Init+0x74>)
 800138c:	2201      	movs	r2, #1
 800138e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_I2C1_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C1_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <MX_I2C1_Init+0x74>)
 80013b0:	f001 fa50 	bl	8002854 <HAL_I2C_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ba:	f000 fb71 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013be:	2100      	movs	r1, #0
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <MX_I2C1_Init+0x74>)
 80013c2:	f001 ffab 	bl	800331c <HAL_I2CEx_ConfigAnalogFilter>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013cc:	f000 fb68 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_I2C1_Init+0x74>)
 80013d4:	f001 ffed 	bl	80033b2 <HAL_I2CEx_ConfigDigitalFilter>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013de:	f000 fb5f 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000008c 	.word	0x2000008c
 80013ec:	40005400 	.word	0x40005400
 80013f0:	2000090e 	.word	0x2000090e

080013f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_LPUART1_UART_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_LPUART1_UART_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 8001406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800140a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_LPUART1_UART_Init+0x50>)
 8001432:	f004 fab5 	bl	80059a0 <HAL_UART_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 fb30 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000e0 	.word	0x200000e0
 8001448:	40008000 	.word	0x40008000
 800144c:	00033324 	.word	0x00033324

08001450 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_RTC_Init+0x48>)
 8001456:	4a11      	ldr	r2, [pc, #68]	; (800149c <MX_RTC_Init+0x4c>)
 8001458:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_RTC_Init+0x48>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MX_RTC_Init+0x48>)
 8001462:	227f      	movs	r2, #127	; 0x7f
 8001464:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_RTC_Init+0x48>)
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_RTC_Init+0x48>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_RTC_Init+0x48>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_RTC_Init+0x48>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_RTC_Init+0x48>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_RTC_Init+0x48>)
 8001486:	f003 fd01 	bl	8004e8c <HAL_RTC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001490:	f000 fb06 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000164 	.word	0x20000164
 800149c:	40002800 	.word	0x40002800

080014a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_SPI1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_SPI1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_SPI1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI1_Init+0x74>)
 80014d6:	2218      	movs	r2, #24
 80014d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI1_Init+0x74>)
 80014ee:	2207      	movs	r2, #7
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_SPI1_Init+0x74>)
 8001500:	f003 fed8 	bl	80052b4 <HAL_SPI_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 fac9 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000188 	.word	0x20000188
 8001518:	40013000 	.word	0x40013000

0800151c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001522:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001526:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152a:	2206      	movs	r2, #6
 800152c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001530:	2202      	movs	r2, #2
 8001532:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	2202      	movs	r2, #2
 8001538:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153c:	2201      	movs	r2, #1
 800153e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2201      	movs	r2, #1
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2201      	movs	r2, #1
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	f001 ff73 	bl	800344a <HAL_PCD_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 fa99 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001ec 	.word	0x200001ec

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b57      	ldr	r3, [pc, #348]	; (80016ec <MX_GPIO_Init+0x174>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a56      	ldr	r2, [pc, #344]	; (80016ec <MX_GPIO_Init+0x174>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b54      	ldr	r3, [pc, #336]	; (80016ec <MX_GPIO_Init+0x174>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	4b51      	ldr	r3, [pc, #324]	; (80016ec <MX_GPIO_Init+0x174>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a50      	ldr	r2, [pc, #320]	; (80016ec <MX_GPIO_Init+0x174>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <MX_GPIO_Init+0x174>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <MX_GPIO_Init+0x174>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a4a      	ldr	r2, [pc, #296]	; (80016ec <MX_GPIO_Init+0x174>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <MX_GPIO_Init+0x174>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b45      	ldr	r3, [pc, #276]	; (80016ec <MX_GPIO_Init+0x174>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a44      	ldr	r2, [pc, #272]	; (80016ec <MX_GPIO_Init+0x174>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b42      	ldr	r3, [pc, #264]	; (80016ec <MX_GPIO_Init+0x174>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <MX_GPIO_Init+0x174>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a3e      	ldr	r2, [pc, #248]	; (80016ec <MX_GPIO_Init+0x174>)
 80015f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <MX_GPIO_Init+0x174>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001606:	f002 f8ed 	bl	80037e4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_UI_Pin|DC_UI_Pin|BOOT_BMS_Pin|SPI1_CS_UI_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2155      	movs	r1, #85	; 0x55
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f001 f8d5 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800161c:	4834      	ldr	r0, [pc, #208]	; (80016f0 <MX_GPIO_Init+0x178>)
 800161e:	f001 f8cf 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	4833      	ldr	r0, [pc, #204]	; (80016f4 <MX_GPIO_Init+0x17c>)
 8001628:	f001 f8ca 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800162c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001632:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	482d      	ldr	r0, [pc, #180]	; (80016f8 <MX_GPIO_Init+0x180>)
 8001644:	f000 ff12 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_UI_Pin DC_UI_Pin BOOT_BMS_Pin SPI1_CS_UI_Pin */
  GPIO_InitStruct.Pin = RST_UI_Pin|DC_UI_Pin|BOOT_BMS_Pin|SPI1_CS_UI_Pin;
 8001648:	2355      	movs	r3, #85	; 0x55
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f000 ff03 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_UI_Pin ALERT_BMS_Pin */
  GPIO_InitStruct.Pin = BUSY_UI_Pin|ALERT_BMS_Pin;
 8001666:	2328      	movs	r3, #40	; 0x28
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f000 fef5 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001682:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <MX_GPIO_Init+0x178>)
 800169c:	f000 fee6 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016a0:	2320      	movs	r3, #32
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <MX_GPIO_Init+0x17c>)
 80016b4:	f000 feda 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016b8:	2340      	movs	r3, #64	; 0x40
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4809      	ldr	r0, [pc, #36]	; (80016f4 <MX_GPIO_Init+0x17c>)
 80016d0:	f000 fecc 	bl	800246c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2017      	movs	r0, #23
 80016da:	f000 fe90 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016de:	2017      	movs	r0, #23
 80016e0:	f000 fea9 	bl	8002436 <HAL_NVIC_EnableIRQ>

}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	; 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000400 	.word	0x48000400
 80016f4:	48001800 	.word	0x48001800
 80016f8:	48000800 	.word	0x48000800

080016fc <BQ76940_set_register>:
  * @param reg: the register address of register to be changed.
  * @param bit_order: bit value to set register to (example 0b01010101).
  * @retval None
  */
void BQ76940_set_register(uint8_t reg, uint8_t reg_val)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af04      	add	r7, sp, #16
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, BQ76940_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &reg_val, 1, HAL_MAX_DELAY);
 800170c:	2310      	movs	r3, #16
 800170e:	b299      	uxth	r1, r3
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	b29a      	uxth	r2, r3
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	2301      	movs	r3, #1
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	1dbb      	adds	r3, r7, #6
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	480a      	ldr	r0, [pc, #40]	; (8001750 <BQ76940_set_register+0x54>)
 8001726:	f001 f925 	bl	8002974 <HAL_I2C_Mem_Write>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <BQ76940_set_register+0x58>)
 8001730:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK){
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <BQ76940_set_register+0x58>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <BQ76940_set_register+0x44>
		printf("ERROR on Writing to register\r\n");
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <BQ76940_set_register+0x5c>)
 800173c:	f005 f952 	bl	80069e4 <puts>
	}
	printf("Register set");
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <BQ76940_set_register+0x60>)
 8001742:	f005 f8c9 	bl	80068d8 <iprintf>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000008c 	.word	0x2000008c
 8001754:	200006f8 	.word	0x200006f8
 8001758:	08007d94 	.word	0x08007d94
 800175c:	08007db4 	.word	0x08007db4

08001760 <BQ76940_get_register>:
  * @param reg: the register address of register to be read.
  * @param buffer: buffer to contain the register data.
  * @retval None
  */
void BQ76940_get_register(uint8_t reg, uint8_t* buffer)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af04      	add	r7, sp, #16
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
	//Write BQ76940 cells according to cell_reg
	ret = HAL_I2C_Mem_Read(&hi2c1, BQ76940_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buffer, 1, HAL_MAX_DELAY);
 800176c:	2310      	movs	r3, #16
 800176e:	b299      	uxth	r1, r3
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	b29a      	uxth	r2, r3
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2301      	movs	r3, #1
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <BQ76940_get_register+0x50>)
 8001786:	f001 fa09 	bl	8002b9c <HAL_I2C_Mem_Read>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <BQ76940_get_register+0x54>)
 8001790:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK) {
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <BQ76940_get_register+0x54>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <BQ76940_get_register+0x40>
		printf("ERROR on Reading from register\r\n");
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <BQ76940_get_register+0x58>)
 800179c:	f005 f922 	bl	80069e4 <puts>
	}
	printf("Register get");
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <BQ76940_get_register+0x5c>)
 80017a2:	f005 f899 	bl	80068d8 <iprintf>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000008c 	.word	0x2000008c
 80017b4:	200006f8 	.word	0x200006f8
 80017b8:	08007dc4 	.word	0x08007dc4
 80017bc:	08007de4 	.word	0x08007de4

080017c0 <BQ76940_get_HILO_register>:
  * @param reg: the register address of HI register to be read.
  * @param buffer: buffer to contain the register data.
  * @retval None
  */
uint16_t BQ76940_get_HILO_register(uint8_t reg, uint8_t* buf)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af04      	add	r7, sp, #16
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
	uint16_t val, temp_volt, temp_res;
	ret = HAL_I2C_Mem_Read(&hi2c1, BQ76940_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 80017cc:	2310      	movs	r3, #16
 80017ce:	b299      	uxth	r1, r3
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2302      	movs	r3, #2
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	4862      	ldr	r0, [pc, #392]	; (8001970 <BQ76940_get_HILO_register+0x1b0>)
 80017e6:	f001 f9d9 	bl	8002b9c <HAL_I2C_Mem_Read>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b61      	ldr	r3, [pc, #388]	; (8001974 <BQ76940_get_HILO_register+0x1b4>)
 80017f0:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK) {
 80017f2:	4b60      	ldr	r3, [pc, #384]	; (8001974 <BQ76940_get_HILO_register+0x1b4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <BQ76940_get_HILO_register+0x44>
		printf("ERROR on Reading from HILO register\r\n");
 80017fa:	485f      	ldr	r0, [pc, #380]	; (8001978 <BQ76940_get_HILO_register+0x1b8>)
 80017fc:	f005 f8f2 	bl	80069e4 <puts>


		return val;

	}
	return 0;
 8001800:	2300      	movs	r3, #0
 8001802:	e098      	b.n	8001936 <BQ76940_get_HILO_register+0x176>
		val = (((int16_t)buf[0] << 8) | buf[1]);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b21a      	sxth	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21b      	sxth	r3, r3
 8001818:	81fb      	strh	r3, [r7, #14]
		if(reg == TS1_HI_REG){
 800181a:	222c      	movs	r2, #44	; 0x2c
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4293      	cmp	r3, r2
 8001820:	d159      	bne.n	80018d6 <BQ76940_get_HILO_register+0x116>
			temp_volt = val*(382*(10*exp(-6)));
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe85 	bl	8000534 <__aeabi_i2d>
 800182a:	a345      	add	r3, pc, #276	; (adr r3, 8001940 <BQ76940_get_HILO_register+0x180>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe feea 	bl	8000608 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f994 	bl	8000b68 <__aeabi_d2uiz>
 8001840:	4603      	mov	r3, r0
 8001842:	81bb      	strh	r3, [r7, #12]
			temp_res = ((10000 * temp_volt) / (3.3 - temp_volt));
 8001844:	89bb      	ldrh	r3, [r7, #12]
 8001846:	f242 7210 	movw	r2, #10000	; 0x2710
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe70 	bl	8000534 <__aeabi_i2d>
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
 8001858:	89bb      	ldrh	r3, [r7, #12]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe6a 	bl	8000534 <__aeabi_i2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	a138      	add	r1, pc, #224	; (adr r1, 8001948 <BQ76940_get_HILO_register+0x188>)
 8001866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800186a:	f7fe fd15 	bl	8000298 <__aeabi_dsub>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7fe fff1 	bl	800085c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f971 	bl	8000b68 <__aeabi_d2uiz>
 8001886:	4603      	mov	r3, r0
 8001888:	817b      	strh	r3, [r7, #10]
			printf("Returning temp");
 800188a:	483c      	ldr	r0, [pc, #240]	; (800197c <BQ76940_get_HILO_register+0x1bc>)
 800188c:	f005 f824 	bl	80068d8 <iprintf>
			val = ((-26.38*log(temp_res)) + 91.798);	//see excel sheet "NTC103AT_temp_res_correlation" in Oliver/3-Documentation/3-BMS_docs
 8001890:	897b      	ldrh	r3, [r7, #10]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe3e 	bl	8000514 <__aeabi_ui2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b10 	vmov	d0, r2, r3
 80018a0:	f006 f81e 	bl	80078e0 <log>
 80018a4:	ec51 0b10 	vmov	r0, r1, d0
 80018a8:	a329      	add	r3, pc, #164	; (adr r3, 8001950 <BQ76940_get_HILO_register+0x190>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe feab 	bl	8000608 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	a327      	add	r3, pc, #156	; (adr r3, 8001958 <BQ76940_get_HILO_register+0x198>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fcec 	bl	800029c <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f94c 	bl	8000b68 <__aeabi_d2uiz>
 80018d0:	4603      	mov	r3, r0
 80018d2:	81fb      	strh	r3, [r7, #14]
 80018d4:	e02e      	b.n	8001934 <BQ76940_get_HILO_register+0x174>
		else if(reg == CC_HI_REG){
 80018d6:	2232      	movs	r2, #50	; 0x32
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4293      	cmp	r3, r2
 80018dc:	d127      	bne.n	800192e <BQ76940_get_HILO_register+0x16e>
			if(val > 0x7FF){
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e4:	d305      	bcc.n	80018f2 <BQ76940_get_HILO_register+0x132>
				val |= 0xF000;
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80018ec:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80018f0:	81fb      	strh	r3, [r7, #14]
			printf("Returning current");
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <BQ76940_get_HILO_register+0x1c0>)
 80018f4:	f004 fff0 	bl	80068d8 <iprintf>
			val = ((val*8.44)/(0.8*(10*exp(-3))));
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe1a 	bl	8000534 <__aeabi_i2d>
 8001900:	a317      	add	r3, pc, #92	; (adr r3, 8001960 <BQ76940_get_HILO_register+0x1a0>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe7f 	bl	8000608 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	a315      	add	r3, pc, #84	; (adr r3, 8001968 <BQ76940_get_HILO_register+0x1a8>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe ffa0 	bl	800085c <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f920 	bl	8000b68 <__aeabi_d2uiz>
 8001928:	4603      	mov	r3, r0
 800192a:	81fb      	strh	r3, [r7, #14]
 800192c:	e002      	b.n	8001934 <BQ76940_get_HILO_register+0x174>
			printf("Returning cell voltage");
 800192e:	4815      	ldr	r0, [pc, #84]	; (8001984 <BQ76940_get_HILO_register+0x1c4>)
 8001930:	f004 ffd2 	bl	80068d8 <iprintf>
		return val;
 8001934:	89fb      	ldrh	r3, [r7, #14]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bdb0      	pop	{r4, r5, r7, pc}
 800193e:	bf00      	nop
 8001940:	eb953ebf 	.word	0xeb953ebf
 8001944:	4022f00a 	.word	0x4022f00a
 8001948:	66666666 	.word	0x66666666
 800194c:	400a6666 	.word	0x400a6666
 8001950:	ae147ae1 	.word	0xae147ae1
 8001954:	c03a6147 	.word	0xc03a6147
 8001958:	6e978d50 	.word	0x6e978d50
 800195c:	4056f312 	.word	0x4056f312
 8001960:	ae147ae1 	.word	0xae147ae1
 8001964:	4020e147 	.word	0x4020e147
 8001968:	ccceb0b0 	.word	0xccceb0b0
 800196c:	3fd97db0 	.word	0x3fd97db0
 8001970:	2000008c 	.word	0x2000008c
 8001974:	200006f8 	.word	0x200006f8
 8001978:	08007df4 	.word	0x08007df4
 800197c:	08007e1c 	.word	0x08007e1c
 8001980:	08007e2c 	.word	0x08007e2c
 8001984:	08007e40 	.word	0x08007e40

08001988 <BQ76940_SHIPMODE>:
  * @brief Enter SHIP MODE.
  * @param None
  * @retval None
  */
void BQ76940_SHIPMODE()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af04      	add	r7, sp, #16
	//Write to SYS_CTRL1 register SHUT_A = 0, SHUT_B = 1
	uint8_t buf01[8] = {0x01};
 800198e:	2301      	movs	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
	ret = HAL_I2C_Mem_Write(&hi2c1, BQ76940_ADDR, 0x04, I2C_MEMADD_SIZE_8BIT, buf01, 1, HAL_MAX_DELAY);
 8001996:	2310      	movs	r3, #16
 8001998:	b299      	uxth	r1, r3
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	2301      	movs	r3, #1
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2301      	movs	r3, #1
 80019ac:	2204      	movs	r2, #4
 80019ae:	4817      	ldr	r0, [pc, #92]	; (8001a0c <BQ76940_SHIPMODE+0x84>)
 80019b0:	f000 ffe0 	bl	8002974 <HAL_I2C_Mem_Write>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <BQ76940_SHIPMODE+0x88>)
 80019ba:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK){
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <BQ76940_SHIPMODE+0x88>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <BQ76940_SHIPMODE+0x42>
		printf("ERROR on writing to sys_ctrl1 [SHUT_A = 0, SHUT_B = 1]\r\n");
 80019c4:	4813      	ldr	r0, [pc, #76]	; (8001a14 <BQ76940_SHIPMODE+0x8c>)
 80019c6:	f005 f80d 	bl	80069e4 <puts>
	}

	//Write to SYS_CTRL1 register SHUT_A = 1, SHUT_B = 0
	uint8_t buf10[8] = {0x02};
 80019ca:	2302      	movs	r3, #2
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, BQ76940_ADDR, 0x04, I2C_MEMADD_SIZE_8BIT, buf10, 1, HAL_MAX_DELAY);
 80019d2:	2310      	movs	r3, #16
 80019d4:	b299      	uxth	r1, r3
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	2301      	movs	r3, #1
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	463b      	mov	r3, r7
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2301      	movs	r3, #1
 80019e6:	2204      	movs	r2, #4
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <BQ76940_SHIPMODE+0x84>)
 80019ea:	f000 ffc3 	bl	8002974 <HAL_I2C_Mem_Write>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <BQ76940_SHIPMODE+0x88>)
 80019f4:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK){
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <BQ76940_SHIPMODE+0x88>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <BQ76940_SHIPMODE+0x7c>
		printf("ERROR on writing to sys_ctrl1 [SHUT_A = 1, SHUT_B = 0]\r\n");
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <BQ76940_SHIPMODE+0x90>)
 8001a00:	f004 fff0 	bl	80069e4 <puts>
	}
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000008c 	.word	0x2000008c
 8001a10:	200006f8 	.word	0x200006f8
 8001a14:	08007e58 	.word	0x08007e58
 8001a18:	08007e90 	.word	0x08007e90

08001a1c <STM32L432KB_LP_STOP2>:


void STM32L432KB_LP_STOP2()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8001a20:	f000 fbf2 	bl	8002208 <HAL_SuspendTick>
	HAL_RTCEx_SetWakeUpTimer(&hrtc, WakeUpTimer, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001a24:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <STM32L432KB_LP_STOP2+0x30>)
 8001a2e:	f003 fb3f 	bl	80050b0 <HAL_RTCEx_SetWakeUpTimer>
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f001 fee6 	bl	8003804 <HAL_PWREx_EnterSTOP2Mode>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <STM32L432KB_LP_STOP2+0x30>)
 8001a3a:	f003 fbad 	bl	8005198 <HAL_RTCEx_DeactivateWakeUpTimer>
	SystemClock_Config();
 8001a3e:	f7ff fc3b 	bl	80012b8 <SystemClock_Config>
	HAL_ResumeTick();
 8001a42:	f000 fbf1 	bl	8002228 <HAL_ResumeTick>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000164 	.word	0x20000164

08001a50 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
// EXTI Line5 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line5 (A5 Pin)
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d118      	bne.n	8001a92 <HAL_GPIO_EXTI_Callback+0x42>
    {
    	uint8_t sys_buf[8];
    	BQ76940_get_register(SYS_STAT_REG, sys_buf);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f7ff fe79 	bl	8001760 <BQ76940_get_register>
    	for(int i = 0; i < sizeof(sys_buf); i++){
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e00b      	b.n	8001a8c <HAL_GPIO_EXTI_Callback+0x3c>
    		printf("%d", sys_buf[i]);
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4806      	ldr	r0, [pc, #24]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a82:	f004 ff29 	bl	80068d8 <iprintf>
    	for(int i = 0; i < sizeof(sys_buf); i++){
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b07      	cmp	r3, #7
 8001a90:	d9f0      	bls.n	8001a74 <HAL_GPIO_EXTI_Callback+0x24>
    	}
    }
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	08007ec8 	.word	0x08007ec8

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0ac      	sub	sp, #176	; 0xb0
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	228c      	movs	r2, #140	; 0x8c
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fed7 	bl	80068c8 <memset>
  if(hi2c->Instance==I2C1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_I2C_MspInit+0xb4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d13d      	bne.n	8001ba0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b24:	2340      	movs	r3, #64	; 0x40
 8001b26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fcd1 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b3c:	f7ff ffb0 	bl	8001aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_I2C_MspInit+0xb8>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_I2C_MspInit+0xb8>)
 8001b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_I2C_MspInit+0xb8>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001b58:	f001 fe44 	bl	80037e4 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_BMS_Pin|I2C1_SCL_BMS_Pin;
 8001b5c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b64:	2312      	movs	r3, #18
 8001b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b76:	2304      	movs	r3, #4
 8001b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b80:	4619      	mov	r1, r3
 8001b82:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <HAL_I2C_MspInit+0xbc>)
 8001b84:	f000 fc72 	bl	800246c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_I2C_MspInit+0xb8>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_I2C_MspInit+0xb8>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b92:	6593      	str	r3, [r2, #88]	; 0x58
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_I2C_MspInit+0xb8>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	37b0      	adds	r7, #176	; 0xb0
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48001800 	.word	0x48001800

08001bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b0ac      	sub	sp, #176	; 0xb0
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	228c      	movs	r2, #140	; 0x8c
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fe77 	bl	80068c8 <memset>
  if(huart->Instance==LPUART1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d13d      	bne.n	8001c60 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001be4:	2320      	movs	r3, #32
 8001be6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fc71 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bfc:	f7ff ff50 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001c30:	f001 fdd8 	bl	80037e4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c4e:	2308      	movs	r3, #8
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <HAL_UART_MspInit+0xbc>)
 8001c5c:	f000 fc06 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001c60:	bf00      	nop
 8001c62:	37b0      	adds	r7, #176	; 0xb0
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40008000 	.word	0x40008000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48001800 	.word	0x48001800

08001c74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b0a6      	sub	sp, #152	; 0x98
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	228c      	movs	r2, #140	; 0x8c
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 fe1f 	bl	80068c8 <memset>
  if(hrtc->Instance==RTC)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_RTC_MspInit+0x6c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d120      	bne.n	8001cd6 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fc16 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001cb2:	f7ff fef5 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RTC_MspInit+0x70>)
 8001cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbc:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <HAL_RTC_MspInit+0x70>)
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2003      	movs	r0, #3
 8001ccc:	f000 fb97 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 fbb0 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3798      	adds	r7, #152	; 0x98
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40002800 	.word	0x40002800
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_SPI_MspInit+0x7c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d128      	bne.n	8001d5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d14:	6613      	str	r3, [r2, #96]	; 0x60
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_SPI_MspInit+0x80>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_UI_Pin|SPI1_MOSI_UI_Pin;
 8001d3a:	2382      	movs	r3, #130	; 0x82
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f000 fb88 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013000 	.word	0x40013000
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0ae      	sub	sp, #184	; 0xb8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	228c      	movs	r2, #140	; 0x8c
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 fd9b 	bl	80068c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d9a:	d17c      	bne.n	8001e96 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001da2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001da6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001db2:	2318      	movs	r3, #24
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001dc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fb83 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001dd8:	f7ff fe62 	bl	8001aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001df4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e0e:	230a      	movs	r3, #10
 8001e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f000 fb25 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e40:	f000 fb14 	bl	800246c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d114      	bne.n	8001e92 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	6593      	str	r3, [r2, #88]	; 0x58
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001e80:	f001 fca0 	bl	80037c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_PCD_MspInit+0x134>)
 8001e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e90:	e001      	b.n	8001e96 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001e92:	f001 fc97 	bl	80037c4 <HAL_PWREx_EnableVddUSB>
}
 8001e96:	bf00      	nop
 8001e98:	37b8      	adds	r7, #184	; 0xb8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef0:	f000 f946 	bl	8002180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <RTC_WKUP_IRQHandler+0x10>)
 8001efe:	f003 f9a9 	bl	8005254 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000164 	.word	0x20000164

08001f0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALERT_BMS_Pin);
 8001f10:	2020      	movs	r0, #32
 8001f12:	f000 fc87 	bl	8002824 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e00a      	b.n	8001f42 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f2c:	f3af 8000 	nop.w
 8001f30:	4601      	mov	r1, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	60ba      	str	r2, [r7, #8]
 8001f38:	b2ca      	uxtb	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbf0      	blt.n	8001f2c <_read+0x12>
	}

return len;
 8001f4a:	687b      	ldr	r3, [r7, #4]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e009      	b.n	8001f7a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	60ba      	str	r2, [r7, #8]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbf1      	blt.n	8001f66 <_write+0x12>
	}
	return len;
 8001f82:	687b      	ldr	r3, [r7, #4]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_close>:

int _close(int file)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	return -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb4:	605a      	str	r2, [r3, #4]
	return 0;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_isatty>:

int _isatty(int file)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	return 1;
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
	return 0;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <_sbrk+0x5c>)
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <_sbrk+0x60>)
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <_sbrk+0x64>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <_sbrk+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002024:	f004 fc26 	bl	8006874 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e009      	b.n	8002048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20050000 	.word	0x20050000
 8002054:	00000400 	.word	0x00000400
 8002058:	200006fc 	.word	0x200006fc
 800205c:	20000718 	.word	0x20000718

08002060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <SystemInit+0x20>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <SystemInit+0x20>)
 800206c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002088:	f7ff ffea 	bl	8002060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800208e:	490d      	ldr	r1, [pc, #52]	; (80020c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <LoopForever+0xe>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a4:	4c0a      	ldr	r4, [pc, #40]	; (80020d0 <LoopForever+0x16>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020b2:	f004 fbe5 	bl	8006880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020b6:	f7fe ffe7 	bl	8001088 <main>

080020ba <LoopForever>:

LoopForever:
    b LoopForever
 80020ba:	e7fe      	b.n	80020ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020c8:	08007fbc 	.word	0x08007fbc
  ldr r2, =_sbss
 80020cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020d0:	20000714 	.word	0x20000714

080020d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_2_IRQHandler>

080020d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 f981 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020e6:	2000      	movs	r0, #0
 80020e8:	f000 f80e 	bl	8002108 <HAL_InitTick>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	e001      	b.n	80020fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020f8:	f7ff fcd8 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020fc:	79fb      	ldrb	r3, [r7, #7]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_InitTick+0x6c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d023      	beq.n	8002164 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_InitTick+0x70>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_InitTick+0x6c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f98d 	bl	8002452 <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d809      	bhi.n	8002158 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 f957 	bl	80023fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_InitTick+0x74>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e007      	b.n	8002168 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e004      	b.n	8002168 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	e001      	b.n	8002168 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000008 	.word	0x20000008
 8002178:	20000000 	.word	0x20000000
 800217c:	20000004 	.word	0x20000004

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000008 	.word	0x20000008
 80021a4:	20000700 	.word	0x20000700

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000700 	.word	0x20000700

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d005      	beq.n	80021e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_Delay+0x44>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e6:	bf00      	nop
 80021e8:	f7ff ffde 	bl	80021a8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d8f7      	bhi.n	80021e8 <HAL_Delay+0x28>
  {
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008

08002208 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_SuspendTick+0x1c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_SuspendTick+0x1c>)
 8002212:	f023 0302 	bic.w	r3, r3, #2
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_ResumeTick+0x1c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_ResumeTick+0x1c>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	; (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff8e 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff29 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff3e 	bl	8002290 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff8e 	bl	800233c <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5d 	bl	80022e8 <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff31 	bl	80022ac <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247a:	e166      	b.n	800274a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8158 	beq.w	8002744 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d005      	beq.n	80024ac <HAL_GPIO_Init+0x40>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d130      	bne.n	800250e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e2:	2201      	movs	r2, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0201 	and.w	r2, r3, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b03      	cmp	r3, #3
 8002518:	d017      	beq.n	800254a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d123      	bne.n	800259e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	6939      	ldr	r1, [r7, #16]
 800259a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0203 	and.w	r2, r3, #3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80b2 	beq.w	8002744 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e0:	4b61      	ldr	r3, [pc, #388]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 80025e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e4:	4a60      	ldr	r2, [pc, #384]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6613      	str	r3, [r2, #96]	; 0x60
 80025ec:	4b5e      	ldr	r3, [pc, #376]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 80025ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025f8:	4a5c      	ldr	r2, [pc, #368]	; (800276c <HAL_GPIO_Init+0x300>)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002622:	d02b      	beq.n	800267c <HAL_GPIO_Init+0x210>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d025      	beq.n	8002678 <HAL_GPIO_Init+0x20c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x308>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d01f      	beq.n	8002674 <HAL_GPIO_Init+0x208>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a50      	ldr	r2, [pc, #320]	; (8002778 <HAL_GPIO_Init+0x30c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d019      	beq.n	8002670 <HAL_GPIO_Init+0x204>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a4f      	ldr	r2, [pc, #316]	; (800277c <HAL_GPIO_Init+0x310>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d013      	beq.n	800266c <HAL_GPIO_Init+0x200>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a4e      	ldr	r2, [pc, #312]	; (8002780 <HAL_GPIO_Init+0x314>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00d      	beq.n	8002668 <HAL_GPIO_Init+0x1fc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a4d      	ldr	r2, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x318>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <HAL_GPIO_Init+0x1f8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a4c      	ldr	r2, [pc, #304]	; (8002788 <HAL_GPIO_Init+0x31c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_GPIO_Init+0x1f4>
 800265c:	2307      	movs	r3, #7
 800265e:	e00e      	b.n	800267e <HAL_GPIO_Init+0x212>
 8002660:	2308      	movs	r3, #8
 8002662:	e00c      	b.n	800267e <HAL_GPIO_Init+0x212>
 8002664:	2306      	movs	r3, #6
 8002666:	e00a      	b.n	800267e <HAL_GPIO_Init+0x212>
 8002668:	2305      	movs	r3, #5
 800266a:	e008      	b.n	800267e <HAL_GPIO_Init+0x212>
 800266c:	2304      	movs	r3, #4
 800266e:	e006      	b.n	800267e <HAL_GPIO_Init+0x212>
 8002670:	2303      	movs	r3, #3
 8002672:	e004      	b.n	800267e <HAL_GPIO_Init+0x212>
 8002674:	2302      	movs	r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x212>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_GPIO_Init+0x212>
 800267c:	2300      	movs	r3, #0
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	f002 0203 	and.w	r2, r2, #3
 8002684:	0092      	lsls	r2, r2, #2
 8002686:	4093      	lsls	r3, r2
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268e:	4937      	ldr	r1, [pc, #220]	; (800276c <HAL_GPIO_Init+0x300>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_GPIO_Init+0x320>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026c0:	4a32      	ldr	r2, [pc, #200]	; (800278c <HAL_GPIO_Init+0x320>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_GPIO_Init+0x320>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ea:	4a28      	ldr	r2, [pc, #160]	; (800278c <HAL_GPIO_Init+0x320>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026f0:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_GPIO_Init+0x320>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_GPIO_Init+0x320>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_GPIO_Init+0x320>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <HAL_GPIO_Init+0x320>)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3301      	adds	r3, #1
 8002748:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	f47f ae91 	bne.w	800247c <HAL_GPIO_Init+0x10>
  }
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40021000 	.word	0x40021000
 800276c:	40010000 	.word	0x40010000
 8002770:	48000400 	.word	0x48000400
 8002774:	48000800 	.word	0x48000800
 8002778:	48000c00 	.word	0x48000c00
 800277c:	48001000 	.word	0x48001000
 8002780:	48001400 	.word	0x48001400
 8002784:	48001800 	.word	0x48001800
 8002788:	48001c00 	.word	0x48001c00
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	e001      	b.n	80027b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43d9      	mvns	r1, r3
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	400b      	ands	r3, r1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	619a      	str	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f904 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40010400 	.word	0x40010400

08002854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e081      	b.n	800296a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff f93a 	bl	8001af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2224      	movs	r2, #36	; 0x24
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e006      	b.n	80028dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d104      	bne.n	80028ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002900:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002910:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69d9      	ldr	r1, [r3, #28]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	f040 80f9 	bne.w	8002b8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_I2C_Mem_Write+0x34>
 80029a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0ed      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Mem_Write+0x4e>
 80029be:	2302      	movs	r3, #2
 80029c0:	e0e6      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ca:	f7ff fbed 	bl	80021a8 <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2319      	movs	r3, #25
 80029d6:	2201      	movs	r2, #1
 80029d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fac3 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d1      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2221      	movs	r2, #33	; 0x21
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a14:	88f8      	ldrh	r0, [r7, #6]
 8002a16:	893a      	ldrh	r2, [r7, #8]
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4603      	mov	r3, r0
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f9d3 	bl	8002dd0 <I2C_RequestMemoryWrite>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0a9      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d90e      	bls.n	8002a64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	2300      	movs	r3, #0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fc2b 	bl	80032b8 <I2C_TransferConfig>
 8002a62:	e00f      	b.n	8002a84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fc1a 	bl	80032b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 faad 	bl	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e07b      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d034      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x1c8>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d130      	bne.n	8002b3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fa3f 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04d      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	d90e      	bls.n	8002b1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	8979      	ldrh	r1, [r7, #10]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fbcf 	bl	80032b8 <I2C_TransferConfig>
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fbbe 	bl	80032b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d19e      	bne.n	8002a84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fa8c 	bl	8003068 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e01a      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_I2C_Mem_Write+0x224>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	fe00e800 	.word	0xfe00e800

08002b9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	f040 80fd 	bne.w	8002dbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_I2C_Mem_Read+0x34>
 8002bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0f1      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Read+0x4e>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0ea      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bf2:	f7ff fad9 	bl	80021a8 <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2319      	movs	r3, #25
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f9af 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0d5      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2222      	movs	r2, #34	; 0x22
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2240      	movs	r2, #64	; 0x40
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c3c:	88f8      	ldrh	r0, [r7, #6]
 8002c3e:	893a      	ldrh	r2, [r7, #8]
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f913 	bl	8002e78 <I2C_RequestMemoryRead>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0ad      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2bff      	cmp	r3, #255	; 0xff
 8002c6c:	d90e      	bls.n	8002c8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	4b52      	ldr	r3, [pc, #328]	; (8002dc8 <HAL_I2C_Mem_Read+0x22c>)
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fb17 	bl	80032b8 <I2C_TransferConfig>
 8002c8a:	e00f      	b.n	8002cac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_I2C_Mem_Read+0x22c>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fb06 	bl	80032b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f956 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07c      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d034      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x1d0>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d130      	bne.n	8002d6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	2200      	movs	r2, #0
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f927 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e04d      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2bff      	cmp	r3, #255	; 0xff
 8002d2c:	d90e      	bls.n	8002d4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	8979      	ldrh	r1, [r7, #10]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fab7 	bl	80032b8 <I2C_TransferConfig>
 8002d4a:	e00f      	b.n	8002d6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 faa6 	bl	80032b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d19a      	bne.n	8002cac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f974 	bl	8003068 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e01a      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_I2C_Mem_Read+0x230>)
 8002d9e:	400b      	ands	r3, r1
 8002da0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	80002400 	.word	0x80002400
 8002dcc:	fe00e800 	.word	0xfe00e800

08002dd0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	460b      	mov	r3, r1
 8002de4:	813b      	strh	r3, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <I2C_RequestMemoryWrite+0xa4>)
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fa5d 	bl	80032b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	69b9      	ldr	r1, [r7, #24]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f8f0 	bl	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e02c      	b.n	8002e6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e18:	893b      	ldrh	r3, [r7, #8]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
 8002e22:	e015      	b.n	8002e50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e24:	893b      	ldrh	r3, [r7, #8]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	69b9      	ldr	r1, [r7, #24]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f8d6 	bl	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e012      	b.n	8002e6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e46:	893b      	ldrh	r3, [r7, #8]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2200      	movs	r2, #0
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f884 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	80002000 	.word	0x80002000

08002e78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <I2C_RequestMemoryRead+0xa4>)
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa0a 	bl	80032b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f89d 	bl	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e02c      	b.n	8002f12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ebe:	893b      	ldrh	r3, [r7, #8]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec8:	e015      	b.n	8002ef6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	69b9      	ldr	r1, [r7, #24]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f883 	bl	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e012      	b.n	8002f12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eec:	893b      	ldrh	r3, [r7, #8]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f831 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	80002000 	.word	0x80002000

08002f20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d103      	bne.n	8002f3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d007      	beq.n	8002f5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	619a      	str	r2, [r3, #24]
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f78:	e022      	b.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d01e      	beq.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7ff f911 	bl	80021a8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d113      	bne.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e00f      	b.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d0cd      	beq.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ff4:	e02c      	b.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f870 	bl	80030e0 <I2C_IsErrorOccurred>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e02a      	b.n	8003060 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d01e      	beq.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7ff f8c9 	bl	80021a8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d113      	bne.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e007      	b.n	8003060 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d1cb      	bne.n	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003074:	e028      	b.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f830 	bl	80030e0 <I2C_IsErrorOccurred>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e026      	b.n	80030d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7ff f88d 	bl	80021a8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d113      	bne.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e007      	b.n	80030d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d1cf      	bne.n	8003076 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d075      	beq.n	80031f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2210      	movs	r2, #16
 8003112:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003114:	e056      	b.n	80031c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d052      	beq.n	80031c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7ff f843 	bl	80021a8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_IsErrorOccurred+0x54>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d147      	bne.n	80031c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003146:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d12e      	bne.n	80031b6 <I2C_IsErrorOccurred+0xd6>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800315e:	d02a      	beq.n	80031b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b20      	cmp	r3, #32
 8003164:	d027      	beq.n	80031b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003174:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003176:	f7ff f817 	bl	80021a8 <HAL_GetTick>
 800317a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800317c:	e01b      	b.n	80031b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800317e:	f7ff f813 	bl	80021a8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b19      	cmp	r3, #25
 800318a:	d914      	bls.n	80031b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d1dc      	bne.n	800317e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d003      	beq.n	80031da <I2C_IsErrorOccurred+0xfa>
 80031d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d09d      	beq.n	8003116 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2220      	movs	r2, #32
 80031e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f043 0308 	orr.w	r3, r3, #8
 8003232:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01c      	beq.n	80032a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff fe56 	bl	8002f20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <I2C_IsErrorOccurred+0x1d4>)
 8003280:	400b      	ands	r3, r1
 8003282:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	431a      	orrs	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	fe00e800 	.word	0xfe00e800

080032b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	4613      	mov	r3, r2
 80032c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d0:	7a7b      	ldrb	r3, [r7, #9]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	0d5b      	lsrs	r3, r3, #21
 80032f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <I2C_TransferConfig+0x60>)
 80032f8:	430b      	orrs	r3, r1
 80032fa:	43db      	mvns	r3, r3
 80032fc:	ea02 0103 	and.w	r1, r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	03ff63ff 	.word	0x03ff63ff

0800331c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	d138      	bne.n	80033a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800333c:	2302      	movs	r3, #2
 800333e:	e032      	b.n	80033a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d139      	bne.n	800343c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e033      	b.n	800343e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2224      	movs	r2, #36	; 0x24
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003404:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800344a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344c:	b08f      	sub	sp, #60	; 0x3c
 800344e:	af0a      	add	r7, sp, #40	; 0x28
 8003450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e116      	b.n	800368a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe fc78 	bl	8001d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2203      	movs	r2, #3
 8003480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f002 ff61 	bl	8006362 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	687e      	ldr	r6, [r7, #4]
 80034a8:	466d      	mov	r5, sp
 80034aa:	f106 0410 	add.w	r4, r6, #16
 80034ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80034be:	1d33      	adds	r3, r6, #4
 80034c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c2:	6838      	ldr	r0, [r7, #0]
 80034c4:	f002 ff21 	bl	800630a <USB_CoreInit>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0d7      	b.n	800368a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 ff4f 	bl	8006384 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	e04a      	b.n	8003582 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	333d      	adds	r3, #61	; 0x3d
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	333c      	adds	r3, #60	; 0x3c
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	b298      	uxth	r0, r3
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3344      	adds	r3, #68	; 0x44
 8003528:	4602      	mov	r2, r0
 800352a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3340      	adds	r3, #64	; 0x40
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3348      	adds	r3, #72	; 0x48
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	334c      	adds	r3, #76	; 0x4c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3354      	adds	r3, #84	; 0x54
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	3301      	adds	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d3af      	bcc.n	80034ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e044      	b.n	800361c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3301      	adds	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3b5      	bcc.n	8003592 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	687e      	ldr	r6, [r7, #4]
 800362e:	466d      	mov	r5, sp
 8003630:	f106 0410 	add.w	r4, r6, #16
 8003634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800363a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003640:	e885 0003 	stmia.w	r5, {r0, r1}
 8003644:	1d33      	adds	r3, r6, #4
 8003646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003648:	6838      	ldr	r0, [r7, #0]
 800364a:	f002 fee7 	bl	800641c <USB_DevInit>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e014      	b.n	800368a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f80a 	bl	8003692 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f003 f893 	bl	80067ae <USB_DevDisconnect>

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003692 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c4:	f043 0303 	orr.w	r3, r3, #3
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40007000 	.word	0x40007000

080036fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_PWREx_GetVoltageRange+0x18>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40007000 	.word	0x40007000

08003718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003726:	d130      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003734:	d038      	beq.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2232      	movs	r2, #50	; 0x32
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375c:	e002      	b.n	8003764 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3b01      	subs	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d102      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f2      	bne.n	800375e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d110      	bne.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d007      	beq.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037a0:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40007000 	.word	0x40007000
 80037bc:	20000000 	.word	0x20000000
 80037c0:	431bde83 	.word	0x431bde83

080037c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d2:	6053      	str	r3, [r2, #4]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40007000 	.word	0x40007000

080037e4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f2:	6053      	str	r3, [r2, #4]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40007000 	.word	0x40007000

08003804 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0307 	bic.w	r3, r3, #7
 8003816:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003830:	bf30      	wfi
 8003832:	e002      	b.n	800383a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003834:	bf40      	sev
    __WFE();
 8003836:	bf20      	wfe
    __WFE();
 8003838:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	4a06      	ldr	r2, [pc, #24]	; (8003858 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	6113      	str	r3, [r2, #16]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40007000 	.word	0x40007000
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f000 bc08 	b.w	8004080 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003870:	4b96      	ldr	r3, [pc, #600]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800387a:	4b94      	ldr	r3, [pc, #592]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80e4 	beq.w	8003a5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4c>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	f040 808b 	bne.w	80039b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 8087 	bne.w	80039b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038a8:	4b88      	ldr	r3, [pc, #544]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x64>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e3df      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	4b81      	ldr	r3, [pc, #516]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_RCC_OscConfig+0x7e>
 80038d0:	4b7e      	ldr	r3, [pc, #504]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d8:	e005      	b.n	80038e6 <HAL_RCC_OscConfig+0x8a>
 80038da:	4b7c      	ldr	r3, [pc, #496]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d223      	bcs.n	8003932 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fd92 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e3c0      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fe:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a72      	ldr	r2, [pc, #456]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003904:	f043 0308 	orr.w	r3, r3, #8
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b70      	ldr	r3, [pc, #448]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	496d      	ldr	r1, [pc, #436]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391c:	4b6b      	ldr	r3, [pc, #428]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	4968      	ldr	r1, [pc, #416]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e025      	b.n	800397e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003932:	4b66      	ldr	r3, [pc, #408]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a65      	ldr	r2, [pc, #404]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4960      	ldr	r1, [pc, #384]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003950:	4b5e      	ldr	r3, [pc, #376]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	495b      	ldr	r1, [pc, #364]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fd52 	bl	8004418 <RCC_SetFlashLatencyFromMSIRange>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e380      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800397e:	f000 fc87 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b51      	ldr	r3, [pc, #324]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4950      	ldr	r1, [pc, #320]	; (8003ad0 <HAL_RCC_OscConfig+0x274>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a4e      	ldr	r2, [pc, #312]	; (8003ad4 <HAL_RCC_OscConfig+0x278>)
 800399c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800399e:	4b4e      	ldr	r3, [pc, #312]	; (8003ad8 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fbb0 	bl	8002108 <HAL_InitTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d052      	beq.n	8003a58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	e364      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d032      	beq.n	8003a24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039be:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a42      	ldr	r2, [pc, #264]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ca:	f7fe fbed 	bl	80021a8 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039d2:	f7fe fbe9 	bl	80021a8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e34d      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a35      	ldr	r2, [pc, #212]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039f6:	f043 0308 	orr.w	r3, r3, #8
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4930      	ldr	r1, [pc, #192]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a0e:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	492b      	ldr	r1, [pc, #172]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
 8003a22:	e01a      	b.n	8003a5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a24:	4b29      	ldr	r3, [pc, #164]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a28      	ldr	r2, [pc, #160]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a30:	f7fe fbba 	bl	80021a8 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a38:	f7fe fbb6 	bl	80021a8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e31a      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1dc>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d073      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_OscConfig+0x21c>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d10e      	bne.n	8003a90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d063      	beq.n	8003b4c <HAL_RCC_OscConfig+0x2f0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d15f      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e2f7      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x24c>
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e025      	b.n	8003af4 <HAL_RCC_OscConfig+0x298>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d114      	bne.n	8003adc <HAL_RCC_OscConfig+0x280>
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a02      	ldr	r2, [pc, #8]	; (8003acc <HAL_RCC_OscConfig+0x270>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e013      	b.n	8003af4 <HAL_RCC_OscConfig+0x298>
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08007ecc 	.word	0x08007ecc
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004
 8003adc:	4ba0      	ldr	r3, [pc, #640]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a9f      	ldr	r2, [pc, #636]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b9d      	ldr	r3, [pc, #628]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a9c      	ldr	r2, [pc, #624]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fb54 	bl	80021a8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fb50 	bl	80021a8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e2b4      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b16:	4b92      	ldr	r3, [pc, #584]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2a8>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fb40 	bl	80021a8 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fb3c 	bl	80021a8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e2a0      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2d0>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d060      	beq.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_OscConfig+0x310>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d119      	bne.n	8003b9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d116      	bne.n	8003b9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6c:	4b7c      	ldr	r3, [pc, #496]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_OscConfig+0x328>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e27d      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	4973      	ldr	r1, [pc, #460]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b98:	e040      	b.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d023      	beq.n	8003bea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe fafb 	bl	80021a8 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7fe faf7 	bl	80021a8 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e25b      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc8:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b62      	ldr	r3, [pc, #392]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	495f      	ldr	r1, [pc, #380]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	e018      	b.n	8003c1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bea:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5c      	ldr	r2, [pc, #368]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fe fad7 	bl	80021a8 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7fe fad3 	bl	80021a8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e237      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c10:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d03c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c36:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fe fab2 	bl	80021a8 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fe faae 	bl	80021a8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e212      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ef      	beq.n	8003c48 <HAL_RCC_OscConfig+0x3ec>
 8003c68:	e01b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c70:	4a3b      	ldr	r2, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fa95 	bl	80021a8 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fe fa91 	bl	80021a8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e1f5      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1ef      	bne.n	8003c82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80a6 	beq.w	8003dfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6593      	str	r3, [r2, #88]	; 0x58
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d118      	bne.n	8003d1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fa58 	bl	80021a8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fe fa54 	bl	80021a8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1b8      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_RCC_OscConfig+0x508>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d108      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4d8>
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d32:	e029      	b.n	8003d88 <HAL_RCC_OscConfig+0x52c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d115      	bne.n	8003d68 <HAL_RCC_OscConfig+0x50c>
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	4a03      	ldr	r2, [pc, #12]	; (8003d60 <HAL_RCC_OscConfig+0x504>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x52c>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
 8003d68:	4b9d      	ldr	r3, [pc, #628]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	4a9c      	ldr	r2, [pc, #624]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d78:	4b99      	ldr	r3, [pc, #612]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a98      	ldr	r2, [pc, #608]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d016      	beq.n	8003dbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fa0a 	bl	80021a8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7fe fa06 	bl	80021a8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e168      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	4b8c      	ldr	r3, [pc, #560]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ed      	beq.n	8003d98 <HAL_RCC_OscConfig+0x53c>
 8003dbc:	e015      	b.n	8003dea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f9f3 	bl	80021a8 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fe f9ef 	bl	80021a8 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e151      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ddc:	4b80      	ldr	r3, [pc, #512]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ed      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b7b      	ldr	r3, [pc, #492]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	4a7a      	ldr	r2, [pc, #488]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d03c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e10:	4b73      	ldr	r3, [pc, #460]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e16:	4a72      	ldr	r2, [pc, #456]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe f9c2 	bl	80021a8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e28:	f7fe f9be 	bl	80021a8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e122      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e3a:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ef      	beq.n	8003e28 <HAL_RCC_OscConfig+0x5cc>
 8003e48:	e01b      	b.n	8003e82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e4a:	4b65      	ldr	r3, [pc, #404]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e50:	4a63      	ldr	r2, [pc, #396]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe f9a5 	bl	80021a8 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e62:	f7fe f9a1 	bl	80021a8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e105      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e74:	4b5a      	ldr	r3, [pc, #360]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ef      	bne.n	8003e62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80f9 	beq.w	800407e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	f040 80cf 	bne.w	8004034 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e96:	4b52      	ldr	r3, [pc, #328]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0203 	and.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d12c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d123      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d11b      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d113      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d109      	bne.n	8003f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	3b01      	subs	r3, #1
 8003efe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d071      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d068      	beq.n	8003fdc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f16:	4b32      	ldr	r3, [pc, #200]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0ac      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f26:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f32:	f7fe f939 	bl	80021a8 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fe f935 	bl	80021a8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e099      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f58:	4b21      	ldr	r3, [pc, #132]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_RCC_OscConfig+0x788>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f72:	0212      	lsls	r2, r2, #8
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f7a:	0852      	lsrs	r2, r2, #1
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0552      	lsls	r2, r2, #21
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f86:	0852      	lsrs	r2, r2, #1
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0652      	lsls	r2, r2, #25
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f92:	06d2      	lsls	r2, r2, #27
 8003f94:	430a      	orrs	r2, r1
 8003f96:	4912      	ldr	r1, [pc, #72]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fb4:	f7fe f8f8 	bl	80021a8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe f8f4 	bl	80021a8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e058      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_RCC_OscConfig+0x784>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fda:	e050      	b.n	800407e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e04f      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d144      	bne.n	800407e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a20      	ldr	r2, [pc, #128]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800400c:	f7fe f8cc 	bl	80021a8 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe f8c8 	bl	80021a8 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e02c      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x7b8>
 8004032:	e024      	b.n	800407e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d01f      	beq.n	800407a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a12      	ldr	r2, [pc, #72]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8004040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fe f8af 	bl	80021a8 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fe f8ab 	bl	80021a8 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e00f      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f0      	bne.n	800404e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	4905      	ldr	r1, [pc, #20]	; (8004088 <HAL_RCC_OscConfig+0x82c>)
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x830>)
 8004074:	4013      	ands	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
 8004078:	e001      	b.n	800407e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	feeefffc 	.word	0xfeeefffc

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0e7      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b75      	ldr	r3, [pc, #468]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d910      	bls.n	80040d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b72      	ldr	r3, [pc, #456]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	4970      	ldr	r1, [pc, #448]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cf      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4960      	ldr	r1, [pc, #384]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04c      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d121      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0a6      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d115      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e09a      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e08e      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e086      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4943      	ldr	r1, [pc, #268]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fe f816 	bl	80021a8 <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7fe f812 	bl	80021a8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e06e      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 020c 	and.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1eb      	bne.n	8004180 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d208      	bcs.n	80041d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	492b      	ldr	r1, [pc, #172]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d210      	bcs.n	8004206 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 0207 	bic.w	r2, r3, #7
 80041ec:	4923      	ldr	r1, [pc, #140]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_RCC_ClockConfig+0x1ec>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e036      	b.n	8004274 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004212:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4918      	ldr	r1, [pc, #96]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4910      	ldr	r1, [pc, #64]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004244:	f000 f824 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	490b      	ldr	r1, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1fc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd ff4d 	bl	8002108 <HAL_InitTick>
 800426e:	4603      	mov	r3, r0
 8004270:	72fb      	strb	r3, [r7, #11]

  return status;
 8004272:	7afb      	ldrb	r3, [r7, #11]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40022000 	.word	0x40022000
 8004280:	40021000 	.word	0x40021000
 8004284:	08007ecc 	.word	0x08007ecc
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429e:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a8:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d121      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d11e      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c4:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e005      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e0:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d102      	bne.n	800430e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e004      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d101      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d134      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0xa6>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d003      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xac>
 8004334:	e005      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	e005      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800433e:	617b      	str	r3, [r7, #20]
      break;
 8004340:	e002      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	3301      	adds	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	fb03 f202 	mul.w	r2, r3, r2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	0e5b      	lsrs	r3, r3, #25
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	3301      	adds	r3, #1
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004388:	69bb      	ldr	r3, [r7, #24]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	08007ee4 	.word	0x08007ee4
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	02dc6c00 	.word	0x02dc6c00

080043a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000000 	.word	0x20000000

080043c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c4:	f7ff fff0 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	08007edc 	.word	0x08007edc

080043ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f0:	f7ff ffda 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0adb      	lsrs	r3, r3, #11
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	08007edc 	.word	0x08007edc

08004418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004430:	f7ff f964 	bl	80036fc <HAL_PWREx_GetVoltageRange>
 8004434:	6178      	str	r0, [r7, #20]
 8004436:	e014      	b.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	; 0x58
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004450:	f7ff f954 	bl	80036fc <HAL_PWREx_GetVoltageRange>
 8004454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004460:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004468:	d10b      	bne.n	8004482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d919      	bls.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2ba0      	cmp	r3, #160	; 0xa0
 8004474:	d902      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004476:	2302      	movs	r3, #2
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e013      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800447c:	2301      	movs	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e010      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d902      	bls.n	800448e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004488:	2303      	movs	r3, #3
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e00a      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d102      	bne.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004494:	2302      	movs	r3, #2
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e004      	b.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d101      	bne.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a0:	2301      	movs	r3, #1
 80044a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 0207 	bic.w	r2, r3, #7
 80044ac:	4909      	ldr	r1, [pc, #36]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d001      	beq.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40022000 	.word	0x40022000

080044d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e0:	2300      	movs	r3, #0
 80044e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e4:	2300      	movs	r3, #0
 80044e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d041      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044fc:	d02a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004502:	d824      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004508:	d008      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800450a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800450e:	d81e      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004518:	d010      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800451a:	e018      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800451c:	4b86      	ldr	r3, [pc, #536]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a85      	ldr	r2, [pc, #532]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004528:	e015      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fadd 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800453a:	e00c      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3320      	adds	r3, #32
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fbc6 	bl	8004cd4 <RCCEx_PLLSAI2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	74fb      	strb	r3, [r7, #19]
      break;
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800455c:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456a:	4973      	ldr	r1, [pc, #460]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004572:	e001      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d041      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004588:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800458c:	d02a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800458e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004592:	d824      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004598:	d008      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800459a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459e:	d81e      	bhi.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a8:	d010      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045aa:	e018      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045ac:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a61      	ldr	r2, [pc, #388]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045b8:	e015      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fa95 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ca:	e00c      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3320      	adds	r3, #32
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb7e 	bl	8004cd4 <RCCEx_PLLSAI2_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	74fb      	strb	r3, [r7, #19]
      break;
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ec:	4b52      	ldr	r3, [pc, #328]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fa:	494f      	ldr	r1, [pc, #316]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004602:	e001      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a0 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	4a40      	ldr	r2, [pc, #256]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6593      	str	r3, [r2, #88]	; 0x58
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004648:	2301      	movs	r3, #1
 800464a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464c:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a3a      	ldr	r2, [pc, #232]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004658:	f7fd fda6 	bl	80021a8 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800465e:	e009      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004660:	f7fd fda2 	bl	80021a8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d902      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	74fb      	strb	r3, [r7, #19]
        break;
 8004672:	e005      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004674:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0ef      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d15c      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004690:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01f      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d019      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fd fd61 	bl	80021a8 <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e00b      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fd fd5d 	bl	80021a8 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d902      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ec      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10c      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800472e:	e009      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004744:	7c7b      	ldrb	r3, [r7, #17]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4ba6      	ldr	r3, [pc, #664]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4aa5      	ldr	r2, [pc, #660]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004762:	4ba0      	ldr	r3, [pc, #640]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f023 0203 	bic.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	499c      	ldr	r1, [pc, #624]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004784:	4b97      	ldr	r3, [pc, #604]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f023 020c 	bic.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	4994      	ldr	r1, [pc, #592]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a6:	4b8f      	ldr	r3, [pc, #572]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	498b      	ldr	r1, [pc, #556]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c8:	4b86      	ldr	r3, [pc, #536]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4983      	ldr	r1, [pc, #524]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ea:	4b7e      	ldr	r3, [pc, #504]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	497a      	ldr	r1, [pc, #488]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800480c:	4b75      	ldr	r3, [pc, #468]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	4972      	ldr	r1, [pc, #456]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800482e:	4b6d      	ldr	r3, [pc, #436]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483c:	4969      	ldr	r1, [pc, #420]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004850:	4b64      	ldr	r3, [pc, #400]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485e:	4961      	ldr	r1, [pc, #388]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004872:	4b5c      	ldr	r3, [pc, #368]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	4958      	ldr	r1, [pc, #352]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	4950      	ldr	r1, [pc, #320]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048b6:	4b4b      	ldr	r3, [pc, #300]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	4947      	ldr	r1, [pc, #284]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048d8:	4b42      	ldr	r3, [pc, #264]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	493f      	ldr	r1, [pc, #252]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d028      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048fa:	4b3a      	ldr	r3, [pc, #232]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4936      	ldr	r1, [pc, #216]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004918:	d106      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800491a:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4a31      	ldr	r2, [pc, #196]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004924:	60d3      	str	r3, [r2, #12]
 8004926:	e011      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004930:	d10c      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	2101      	movs	r1, #1
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f8d9 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d028      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004958:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004966:	491f      	ldr	r1, [pc, #124]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004976:	d106      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004978:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800497e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004982:	60d3      	str	r3, [r2, #12]
 8004984:	e011      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800498e:	d10c      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2101      	movs	r1, #1
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f8aa 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d4:	d108      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d6:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a02      	ldr	r2, [pc, #8]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e0:	60d3      	str	r3, [r2, #12]
 80049e2:	e013      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80049e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f879 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02f      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a26:	4929      	ldr	r1, [pc, #164]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a36:	d10d      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f856 	bl	8004af0 <RCCEx_PLLSAI1_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a48:	7cfb      	ldrb	r3, [r7, #19]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d014      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	74bb      	strb	r3, [r7, #18]
 8004a52:	e011      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3320      	adds	r3, #32
 8004a62:	2102      	movs	r1, #2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f935 	bl	8004cd4 <RCCEx_PLLSAI2_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a6e:	7cfb      	ldrb	r3, [r7, #19]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
 8004a76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a94:	490d      	ldr	r1, [pc, #52]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab8:	4904      	ldr	r1, [pc, #16]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000

08004ad0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	6013      	str	r3, [r2, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000

08004af0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004afe:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b0a:	4b71      	ldr	r3, [pc, #452]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0203 	and.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10d      	bne.n	8004b36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b22:	4b6b      	ldr	r3, [pc, #428]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
       ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d047      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
 8004b3a:	e044      	b.n	8004bc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d018      	beq.n	8004b76 <RCCEx_PLLSAI1_Config+0x86>
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d825      	bhi.n	8004b94 <RCCEx_PLLSAI1_Config+0xa4>
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d002      	beq.n	8004b52 <RCCEx_PLLSAI1_Config+0x62>
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d009      	beq.n	8004b64 <RCCEx_PLLSAI1_Config+0x74>
 8004b50:	e020      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b52:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11d      	bne.n	8004b9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b62:	e01a      	b.n	8004b9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b64:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b74:	e013      	b.n	8004b9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b76:	4b56      	ldr	r3, [pc, #344]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b82:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b92:	e006      	b.n	8004ba2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      break;
 8004b98:	e004      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004baa:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	4943      	ldr	r1, [pc, #268]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d17c      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bcc:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3f      	ldr	r2, [pc, #252]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fae6 	bl	80021a8 <HAL_GetTick>
 8004bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bde:	e009      	b.n	8004bf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004be0:	f7fd fae2 	bl	80021a8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d902      	bls.n	8004bf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bf2:	e005      	b.n	8004c00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf4:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ef      	bne.n	8004be0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d15f      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d110      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0c:	4b30      	ldr	r3, [pc, #192]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004c14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6892      	ldr	r2, [r2, #8]
 8004c1c:	0211      	lsls	r1, r2, #8
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68d2      	ldr	r2, [r2, #12]
 8004c22:	06d2      	lsls	r2, r2, #27
 8004c24:	430a      	orrs	r2, r1
 8004c26:	492a      	ldr	r1, [pc, #168]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]
 8004c2c:	e027      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d112      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c34:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6912      	ldr	r2, [r2, #16]
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0552      	lsls	r2, r2, #21
 8004c50:	430a      	orrs	r2, r1
 8004c52:	491f      	ldr	r1, [pc, #124]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
 8004c58:	e011      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6892      	ldr	r2, [r2, #8]
 8004c6a:	0211      	lsls	r1, r2, #8
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6952      	ldr	r2, [r2, #20]
 8004c70:	0852      	lsrs	r2, r2, #1
 8004c72:	3a01      	subs	r2, #1
 8004c74:	0652      	lsls	r2, r2, #25
 8004c76:	430a      	orrs	r2, r1
 8004c78:	4915      	ldr	r1, [pc, #84]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c7e:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8a:	f7fd fa8d 	bl	80021a8 <HAL_GetTick>
 8004c8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c90:	e009      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c92:	f7fd fa89 	bl	80021a8 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d902      	bls.n	8004ca6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ca4:	e005      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ef      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ce2:	4b69      	ldr	r3, [pc, #420]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d018      	beq.n	8004d20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cee:	4b66      	ldr	r3, [pc, #408]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0203 	and.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d10d      	bne.n	8004d1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
       ||
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d06:	4b60      	ldr	r3, [pc, #384]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
       ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d047      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	e044      	b.n	8004daa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d018      	beq.n	8004d5a <RCCEx_PLLSAI2_Config+0x86>
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d825      	bhi.n	8004d78 <RCCEx_PLLSAI2_Config+0xa4>
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d002      	beq.n	8004d36 <RCCEx_PLLSAI2_Config+0x62>
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d009      	beq.n	8004d48 <RCCEx_PLLSAI2_Config+0x74>
 8004d34:	e020      	b.n	8004d78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d36:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11d      	bne.n	8004d7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d46:	e01a      	b.n	8004d7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d48:	4b4f      	ldr	r3, [pc, #316]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d58:	e013      	b.n	8004d82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d5a:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d66:	4b48      	ldr	r3, [pc, #288]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d76:	e006      	b.n	8004d86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e004      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d8e:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	430b      	orrs	r3, r1
 8004da4:	4938      	ldr	r1, [pc, #224]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d166      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004db0:	4b35      	ldr	r3, [pc, #212]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbc:	f7fd f9f4 	bl	80021a8 <HAL_GetTick>
 8004dc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dc2:	e009      	b.n	8004dd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dc4:	f7fd f9f0 	bl	80021a8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d902      	bls.n	8004dd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004dd6:	e005      	b.n	8004de4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ef      	bne.n	8004dc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d149      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d110      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004df8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	0211      	lsls	r1, r2, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68d2      	ldr	r2, [r2, #12]
 8004e06:	06d2      	lsls	r2, r2, #27
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	491f      	ldr	r1, [pc, #124]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	614b      	str	r3, [r1, #20]
 8004e10:	e011      	b.n	8004e36 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e12:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	0211      	lsls	r1, r2, #8
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6912      	ldr	r2, [r2, #16]
 8004e28:	0852      	lsrs	r2, r2, #1
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	0652      	lsls	r2, r2, #25
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	4915      	ldr	r1, [pc, #84]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fd f9b1 	bl	80021a8 <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e48:	e009      	b.n	8004e5e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e4a:	f7fd f9ad 	bl	80021a8 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d902      	bls.n	8004e5e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	73fb      	strb	r3, [r7, #15]
          break;
 8004e5c:	e005      	b.n	8004e6a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0ef      	beq.n	8004e4a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	4903      	ldr	r1, [pc, #12]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000

08004e8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d06c      	beq.n	8004f78 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fc fede 	bl	8001c74 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	22ca      	movs	r2, #202	; 0xca
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2253      	movs	r2, #83	; 0x53
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f87c 	bl	8004fce <RTC_EnterInitMode>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d14b      	bne.n	8004f78 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6899      	ldr	r1, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68d2      	ldr	r2, [r2, #12]
 8004f1a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6919      	ldr	r1, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	041a      	lsls	r2, r3, #16
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f87f 	bl	8005034 <RTC_ExitInitMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d11b      	bne.n	8004f78 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0203 	bic.w	r2, r2, #3
 8004f4e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69da      	ldr	r2, [r3, #28]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	22ff      	movs	r2, #255	; 0xff
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f98:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004f9a:	f7fd f905 	bl	80021a8 <HAL_GetTick>
 8004f9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fa0:	e009      	b.n	8004fb6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fa2:	f7fd f901 	bl	80021a8 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e007      	b.n	8004fc6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0ee      	beq.n	8004fa2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d120      	bne.n	800502a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ff2:	f7fd f8d9 	bl	80021a8 <HAL_GetTick>
 8004ff6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ff8:	e00d      	b.n	8005016 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ffa:	f7fd f8d5 	bl	80021a8 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005008:	d905      	bls.n	8005016 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2203      	movs	r2, #3
 8005012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <RTC_EnterInitMode+0x5c>
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d1e7      	bne.n	8004ffa <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <RTC_ExitInitMode+0x78>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <RTC_ExitInitMode+0x78>)
 8005046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800504c:	4b17      	ldr	r3, [pc, #92]	; (80050ac <RTC_ExitInitMode+0x78>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10c      	bne.n	8005072 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ff92 	bl	8004f82 <HAL_RTC_WaitForSynchro>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01e      	beq.n	80050a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2203      	movs	r2, #3
 8005068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	73fb      	strb	r3, [r7, #15]
 8005070:	e017      	b.n	80050a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <RTC_ExitInitMode+0x78>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	4a0d      	ldr	r2, [pc, #52]	; (80050ac <RTC_ExitInitMode+0x78>)
 8005078:	f023 0320 	bic.w	r3, r3, #32
 800507c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ff7f 	bl	8004f82 <HAL_RTC_WaitForSynchro>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2203      	movs	r2, #3
 800508e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <RTC_ExitInitMode+0x78>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4a04      	ldr	r2, [pc, #16]	; (80050ac <RTC_ExitInitMode+0x78>)
 800509c:	f043 0320 	orr.w	r3, r3, #32
 80050a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40002800 	.word	0x40002800

080050b0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e062      	b.n	8005190 <HAL_RTCEx_SetWakeUpTimer+0xe0>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	22ca      	movs	r2, #202	; 0xca
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2253      	movs	r2, #83	; 0x53
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f8:	609a      	str	r2, [r3, #8]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d120      	bne.n	800514a <HAL_RTCEx_SetWakeUpTimer+0x9a>
#endif
  {
    tickstart = HAL_GetTick();
 8005108:	f7fd f84e 	bl	80021a8 <HAL_GetTick>
 800510c:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800510e:	e015      	b.n	800513c <HAL_RTCEx_SetWakeUpTimer+0x8c>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005110:	f7fd f84a 	bl	80021a8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511e:	d90d      	bls.n	800513c <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	22ff      	movs	r2, #255	; 0xff
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2203      	movs	r2, #3
 800512c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e029      	b.n	8005190 <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0e2      	beq.n	8005110 <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 0107 	bic.w	r1, r3, #7
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005174:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	22ff      	movs	r2, #255	; 0xff
 800517c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e04d      	b.n	800524a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	22ca      	movs	r2, #202	; 0xca
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2253      	movs	r2, #83	; 0x53
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051dc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051ec:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80051ee:	f7fc ffdb 	bl	80021a8 <HAL_GetTick>
 80051f2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80051f4:	e015      	b.n	8005222 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051f6:	f7fc ffd7 	bl	80021a8 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005204:	d90d      	bls.n	8005222 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	22ff      	movs	r2, #255	; 0xff
 800520c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2203      	movs	r2, #3
 8005212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e013      	b.n	800524a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0e2      	beq.n	80051f6 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800525e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005262:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005282:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f80b 	bl	80052a0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40010400 	.word	0x40010400

080052a0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e095      	b.n	80053f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d108      	bne.n	80052e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d6:	d009      	beq.n	80052ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	61da      	str	r2, [r3, #28]
 80052de:	e005      	b.n	80052ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc fcee 	bl	8001ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005322:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800532c:	d902      	bls.n	8005334 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e002      	b.n	800533a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005338:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005342:	d007      	beq.n	8005354 <HAL_SPI_Init+0xa0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800534c:	d002      	beq.n	8005354 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	ea42 0103 	orr.w	r1, r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	0c1b      	lsrs	r3, r3, #16
 80053b0:	f003 0204 	and.w	r2, r3, #4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053d0:	ea42 0103 	orr.w	r1, r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b088      	sub	sp, #32
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_SPI_Transmit+0x22>
 8005418:	2302      	movs	r3, #2
 800541a:	e158      	b.n	80056ce <HAL_SPI_Transmit+0x2d4>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005424:	f7fc fec0 	bl	80021a8 <HAL_GetTick>
 8005428:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d002      	beq.n	8005440 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800543a:	2302      	movs	r3, #2
 800543c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800543e:	e13d      	b.n	80056bc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_SPI_Transmit+0x52>
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005450:	e134      	b.n	80056bc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2203      	movs	r2, #3
 8005456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	d10f      	bne.n	80054be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d007      	beq.n	80054dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e4:	d94b      	bls.n	800557e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_Transmit+0xfa>
 80054ee:	8afb      	ldrh	r3, [r7, #22]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d13e      	bne.n	8005572 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	881a      	ldrh	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005518:	e02b      	b.n	8005572 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b02      	cmp	r3, #2
 8005526:	d112      	bne.n	800554e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	881a      	ldrh	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800554c:	e011      	b.n	8005572 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554e:	f7fc fe2b 	bl	80021a8 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d803      	bhi.n	8005566 <HAL_SPI_Transmit+0x16c>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d102      	bne.n	800556c <HAL_SPI_Transmit+0x172>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005570:	e0a4      	b.n	80056bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ce      	bne.n	800551a <HAL_SPI_Transmit+0x120>
 800557c:	e07c      	b.n	8005678 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0x192>
 8005586:	8afb      	ldrh	r3, [r7, #22]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d170      	bne.n	800566e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d912      	bls.n	80055bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	881a      	ldrh	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	1c9a      	adds	r2, r3, #2
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b02      	subs	r3, #2
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ba:	e058      	b.n	800566e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	7812      	ldrb	r2, [r2, #0]
 80055c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055e2:	e044      	b.n	800566e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d12b      	bne.n	800564a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d912      	bls.n	8005622 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b02      	subs	r3, #2
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005620:	e025      	b.n	800566e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	7812      	ldrb	r2, [r2, #0]
 800562e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005648:	e011      	b.n	800566e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564a:	f7fc fdad 	bl	80021a8 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d803      	bhi.n	8005662 <HAL_SPI_Transmit+0x268>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d102      	bne.n	8005668 <HAL_SPI_Transmit+0x26e>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800566c:	e026      	b.n	80056bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1b5      	bne.n	80055e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f949 	bl	8005914 <SPI_EndRxTxTransaction>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e000      	b.n	80056bc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80056ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056e8:	f7fc fd5e 	bl	80021a8 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056f8:	f7fc fd56 	bl	80021a8 <HAL_GetTick>
 80056fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056fe:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	015b      	lsls	r3, r3, #5
 8005704:	0d1b      	lsrs	r3, r3, #20
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570e:	e054      	b.n	80057ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d050      	beq.n	80057ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005718:	f7fc fd46 	bl	80021a8 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	429a      	cmp	r2, r3
 8005726:	d902      	bls.n	800572e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d13d      	bne.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800573c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005746:	d111      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005750:	d004      	beq.n	800575c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575a:	d107      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005774:	d10f      	bne.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e017      	b.n	80057da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4013      	ands	r3, r2
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	bf0c      	ite	eq
 80057ca:	2301      	moveq	r3, #1
 80057cc:	2300      	movne	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d19b      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000000 	.word	0x20000000

080057e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057fa:	f7fc fcd5 	bl	80021a8 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	4413      	add	r3, r2
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800580a:	f7fc fccd 	bl	80021a8 <HAL_GetTick>
 800580e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005818:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	00da      	lsls	r2, r3, #3
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	0d1b      	lsrs	r3, r3, #20
 8005828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005830:	e060      	b.n	80058f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005838:	d107      	bne.n	800584a <SPI_WaitFifoStateUntilTimeout+0x62>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005848:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d050      	beq.n	80058f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005852:	f7fc fca9 	bl	80021a8 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	429a      	cmp	r2, r3
 8005860:	d902      	bls.n	8005868 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d13d      	bne.n	80058e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005876:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005880:	d111      	bne.n	80058a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588a:	d004      	beq.n	8005896 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	d107      	bne.n	80058a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ae:	d10f      	bne.n	80058d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e010      	b.n	8005906 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	d196      	bne.n	8005832 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3728      	adds	r7, #40	; 0x28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000000 	.word	0x20000000

08005914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff ff5b 	bl	80057e8 <SPI_WaitFifoStateUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e027      	b.n	8005998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	2180      	movs	r1, #128	; 0x80
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff fec0 	bl	80056d8 <SPI_WaitFlagStateUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e014      	b.n	8005998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff ff34 	bl	80057e8 <SPI_WaitFifoStateUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e000      	b.n	8005998 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e040      	b.n	8005a34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fc f8f6 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	; 0x24
 80059cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f82c 	bl	8005a3c <UART_SetConfig>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e022      	b.n	8005a34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fad8 	bl	8005fac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb5f 	bl	80060f0 <UART_CheckIdleState>
 8005a32:	4603      	mov	r3, r0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b08a      	sub	sp, #40	; 0x28
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4ba4      	ldr	r3, [pc, #656]	; (8005cfc <UART_SetConfig+0x2c0>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a99      	ldr	r2, [pc, #612]	; (8005d00 <UART_SetConfig+0x2c4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a90      	ldr	r2, [pc, #576]	; (8005d04 <UART_SetConfig+0x2c8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d126      	bne.n	8005b14 <UART_SetConfig+0xd8>
 8005ac6:	4b90      	ldr	r3, [pc, #576]	; (8005d08 <UART_SetConfig+0x2cc>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d81b      	bhi.n	8005b0c <UART_SetConfig+0xd0>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0xa0>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005afd 	.word	0x08005afd
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005b05 	.word	0x08005b05
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af2:	e116      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005af4:	2302      	movs	r3, #2
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afa:	e112      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005afc:	2304      	movs	r3, #4
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b02:	e10e      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b04:	2308      	movs	r3, #8
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0a:	e10a      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b12:	e106      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a7c      	ldr	r2, [pc, #496]	; (8005d0c <UART_SetConfig+0x2d0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d138      	bne.n	8005b90 <UART_SetConfig+0x154>
 8005b1e:	4b7a      	ldr	r3, [pc, #488]	; (8005d08 <UART_SetConfig+0x2cc>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b0c      	cmp	r3, #12
 8005b2a:	d82d      	bhi.n	8005b88 <UART_SetConfig+0x14c>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0xf8>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b69 	.word	0x08005b69
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b79 	.word	0x08005b79
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b89 	.word	0x08005b89
 8005b50:	08005b89 	.word	0x08005b89
 8005b54:	08005b71 	.word	0x08005b71
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	08005b89 	.word	0x08005b89
 8005b64:	08005b81 	.word	0x08005b81
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6e:	e0d8      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b70:	2302      	movs	r3, #2
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b76:	e0d4      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7e:	e0d0      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b86:	e0cc      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8e:	e0c8      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a5e      	ldr	r2, [pc, #376]	; (8005d10 <UART_SetConfig+0x2d4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d125      	bne.n	8005be6 <UART_SetConfig+0x1aa>
 8005b9a:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <UART_SetConfig+0x2cc>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ba4:	2b30      	cmp	r3, #48	; 0x30
 8005ba6:	d016      	beq.n	8005bd6 <UART_SetConfig+0x19a>
 8005ba8:	2b30      	cmp	r3, #48	; 0x30
 8005baa:	d818      	bhi.n	8005bde <UART_SetConfig+0x1a2>
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d00a      	beq.n	8005bc6 <UART_SetConfig+0x18a>
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d814      	bhi.n	8005bde <UART_SetConfig+0x1a2>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <UART_SetConfig+0x182>
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d008      	beq.n	8005bce <UART_SetConfig+0x192>
 8005bbc:	e00f      	b.n	8005bde <UART_SetConfig+0x1a2>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc4:	e0ad      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bcc:	e0a9      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005bce:	2304      	movs	r3, #4
 8005bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd4:	e0a5      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bdc:	e0a1      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005bde:	2310      	movs	r3, #16
 8005be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be4:	e09d      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a4a      	ldr	r2, [pc, #296]	; (8005d14 <UART_SetConfig+0x2d8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d125      	bne.n	8005c3c <UART_SetConfig+0x200>
 8005bf0:	4b45      	ldr	r3, [pc, #276]	; (8005d08 <UART_SetConfig+0x2cc>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8005bfc:	d016      	beq.n	8005c2c <UART_SetConfig+0x1f0>
 8005bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8005c00:	d818      	bhi.n	8005c34 <UART_SetConfig+0x1f8>
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d00a      	beq.n	8005c1c <UART_SetConfig+0x1e0>
 8005c06:	2b80      	cmp	r3, #128	; 0x80
 8005c08:	d814      	bhi.n	8005c34 <UART_SetConfig+0x1f8>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <UART_SetConfig+0x1d8>
 8005c0e:	2b40      	cmp	r3, #64	; 0x40
 8005c10:	d008      	beq.n	8005c24 <UART_SetConfig+0x1e8>
 8005c12:	e00f      	b.n	8005c34 <UART_SetConfig+0x1f8>
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1a:	e082      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c22:	e07e      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c24:	2304      	movs	r3, #4
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2a:	e07a      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c32:	e076      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3a:	e072      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a35      	ldr	r2, [pc, #212]	; (8005d18 <UART_SetConfig+0x2dc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d12a      	bne.n	8005c9c <UART_SetConfig+0x260>
 8005c46:	4b30      	ldr	r3, [pc, #192]	; (8005d08 <UART_SetConfig+0x2cc>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c54:	d01a      	beq.n	8005c8c <UART_SetConfig+0x250>
 8005c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5a:	d81b      	bhi.n	8005c94 <UART_SetConfig+0x258>
 8005c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c60:	d00c      	beq.n	8005c7c <UART_SetConfig+0x240>
 8005c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c66:	d815      	bhi.n	8005c94 <UART_SetConfig+0x258>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <UART_SetConfig+0x238>
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d008      	beq.n	8005c84 <UART_SetConfig+0x248>
 8005c72:	e00f      	b.n	8005c94 <UART_SetConfig+0x258>
 8005c74:	2300      	movs	r3, #0
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7a:	e052      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c82:	e04e      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8a:	e04a      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c92:	e046      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9a:	e042      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <UART_SetConfig+0x2c4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d13a      	bne.n	8005d1c <UART_SetConfig+0x2e0>
 8005ca6:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <UART_SetConfig+0x2cc>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cb4:	d01a      	beq.n	8005cec <UART_SetConfig+0x2b0>
 8005cb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cba:	d81b      	bhi.n	8005cf4 <UART_SetConfig+0x2b8>
 8005cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc0:	d00c      	beq.n	8005cdc <UART_SetConfig+0x2a0>
 8005cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc6:	d815      	bhi.n	8005cf4 <UART_SetConfig+0x2b8>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <UART_SetConfig+0x298>
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd0:	d008      	beq.n	8005ce4 <UART_SetConfig+0x2a8>
 8005cd2:	e00f      	b.n	8005cf4 <UART_SetConfig+0x2b8>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cda:	e022      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e01e      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e01a      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e016      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e012      	b.n	8005d22 <UART_SetConfig+0x2e6>
 8005cfc:	efff69f3 	.word	0xefff69f3
 8005d00:	40008000 	.word	0x40008000
 8005d04:	40013800 	.word	0x40013800
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40004400 	.word	0x40004400
 8005d10:	40004800 	.word	0x40004800
 8005d14:	40004c00 	.word	0x40004c00
 8005d18:	40005000 	.word	0x40005000
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a9f      	ldr	r2, [pc, #636]	; (8005fa4 <UART_SetConfig+0x568>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d17a      	bne.n	8005e22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d824      	bhi.n	8005d7e <UART_SetConfig+0x342>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <UART_SetConfig+0x300>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d7f 	.word	0x08005d7f
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d7f 	.word	0x08005d7f
 8005d4c:	08005d6f 	.word	0x08005d6f
 8005d50:	08005d7f 	.word	0x08005d7f
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	08005d7f 	.word	0x08005d7f
 8005d5c:	08005d77 	.word	0x08005d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d60:	f7fe fb2e 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005d64:	61f8      	str	r0, [r7, #28]
        break;
 8005d66:	e010      	b.n	8005d8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d68:	4b8f      	ldr	r3, [pc, #572]	; (8005fa8 <UART_SetConfig+0x56c>)
 8005d6a:	61fb      	str	r3, [r7, #28]
        break;
 8005d6c:	e00d      	b.n	8005d8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6e:	f7fe fa8f 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005d72:	61f8      	str	r0, [r7, #28]
        break;
 8005d74:	e009      	b.n	8005d8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7a:	61fb      	str	r3, [r7, #28]
        break;
 8005d7c:	e005      	b.n	8005d8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80fb 	beq.w	8005f88 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d305      	bcc.n	8005dae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d903      	bls.n	8005db6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005db4:	e0e8      	b.n	8005f88 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	2200      	movs	r2, #0
 8005dba:	461c      	mov	r4, r3
 8005dbc:	4615      	mov	r5, r2
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	022b      	lsls	r3, r5, #8
 8005dc8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005dcc:	0222      	lsls	r2, r4, #8
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	6849      	ldr	r1, [r1, #4]
 8005dd2:	0849      	lsrs	r1, r1, #1
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	4688      	mov	r8, r1
 8005dd8:	4681      	mov	r9, r0
 8005dda:	eb12 0a08 	adds.w	sl, r2, r8
 8005dde:	eb43 0b09 	adc.w	fp, r3, r9
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df0:	4650      	mov	r0, sl
 8005df2:	4659      	mov	r1, fp
 8005df4:	f7fa fed8 	bl	8000ba8 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e06:	d308      	bcc.n	8005e1a <UART_SetConfig+0x3de>
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e0e:	d204      	bcs.n	8005e1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e0b6      	b.n	8005f88 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e20:	e0b2      	b.n	8005f88 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e2a:	d15e      	bne.n	8005eea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d828      	bhi.n	8005e86 <UART_SetConfig+0x44a>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <UART_SetConfig+0x400>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	08005e87 	.word	0x08005e87
 8005e4c:	08005e77 	.word	0x08005e77
 8005e50:	08005e87 	.word	0x08005e87
 8005e54:	08005e87 	.word	0x08005e87
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e60:	f7fe faae 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005e64:	61f8      	str	r0, [r7, #28]
        break;
 8005e66:	e014      	b.n	8005e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e68:	f7fe fac0 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 8005e6c:	61f8      	str	r0, [r7, #28]
        break;
 8005e6e:	e010      	b.n	8005e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <UART_SetConfig+0x56c>)
 8005e72:	61fb      	str	r3, [r7, #28]
        break;
 8005e74:	e00d      	b.n	8005e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe fa0b 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005e7a:	61f8      	str	r0, [r7, #28]
        break;
 8005e7c:	e009      	b.n	8005e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	61fb      	str	r3, [r7, #28]
        break;
 8005e84:	e005      	b.n	8005e92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d077      	beq.n	8005f88 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	005a      	lsls	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	441a      	add	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b0f      	cmp	r3, #15
 8005eb2:	d916      	bls.n	8005ee2 <UART_SetConfig+0x4a6>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eba:	d212      	bcs.n	8005ee2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f023 030f 	bic.w	r3, r3, #15
 8005ec4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	8afb      	ldrh	r3, [r7, #22]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	8afa      	ldrh	r2, [r7, #22]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e052      	b.n	8005f88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ee8:	e04e      	b.n	8005f88 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d827      	bhi.n	8005f42 <UART_SetConfig+0x506>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x4bc>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	08005f43 	.word	0x08005f43
 8005f08:	08005f33 	.word	0x08005f33
 8005f0c:	08005f43 	.word	0x08005f43
 8005f10:	08005f43 	.word	0x08005f43
 8005f14:	08005f43 	.word	0x08005f43
 8005f18:	08005f3b 	.word	0x08005f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1c:	f7fe fa50 	bl	80043c0 <HAL_RCC_GetPCLK1Freq>
 8005f20:	61f8      	str	r0, [r7, #28]
        break;
 8005f22:	e014      	b.n	8005f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f24:	f7fe fa62 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 8005f28:	61f8      	str	r0, [r7, #28]
        break;
 8005f2a:	e010      	b.n	8005f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f2c:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <UART_SetConfig+0x56c>)
 8005f2e:	61fb      	str	r3, [r7, #28]
        break;
 8005f30:	e00d      	b.n	8005f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f32:	f7fe f9ad 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8005f36:	61f8      	str	r0, [r7, #28]
        break;
 8005f38:	e009      	b.n	8005f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	61fb      	str	r3, [r7, #28]
        break;
 8005f40:	e005      	b.n	8005f4e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f4c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d019      	beq.n	8005f88 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	085a      	lsrs	r2, r3, #1
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	441a      	add	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	d909      	bls.n	8005f82 <UART_SetConfig+0x546>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f74:	d205      	bcs.n	8005f82 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
 8005f80:	e002      	b.n	8005f88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3728      	adds	r7, #40	; 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40008000 	.word	0x40008000
 8005fa8:	00f42400 	.word	0x00f42400

08005fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060aa:	d10a      	bne.n	80060c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006100:	f7fc f852 	bl	80021a8 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b08      	cmp	r3, #8
 8006112:	d10e      	bne.n	8006132 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f82d 	bl	8006182 <UART_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e023      	b.n	800617a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b04      	cmp	r3, #4
 800613e:	d10e      	bne.n	800615e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f817 	bl	8006182 <UART_WaitOnFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e00d      	b.n	800617a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b09c      	sub	sp, #112	; 0x70
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006192:	e0a5      	b.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	f000 80a1 	beq.w	80062e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fc f803 	bl	80021a8 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80061ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d13e      	bne.n	8006232 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061c8:	667b      	str	r3, [r7, #100]	; 0x64
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e6      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	f023 0301 	bic.w	r3, r3, #1
 80061fc:	663b      	str	r3, [r7, #96]	; 0x60
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006206:	64ba      	str	r2, [r7, #72]	; 0x48
 8006208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800620c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e5      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e067      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d04f      	beq.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800624a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624e:	d147      	bne.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006258:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800626e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
 800627a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800627e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3308      	adds	r3, #8
 8006292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	613b      	str	r3, [r7, #16]
   return(result);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3308      	adds	r3, #8
 80062aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062ac:	623a      	str	r2, [r7, #32]
 80062ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	6a3a      	ldr	r2, [r7, #32]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e5      	bne.n	800628c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e010      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4013      	ands	r3, r2
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	bf0c      	ite	eq
 80062f0:	2301      	moveq	r3, #1
 80062f2:	2300      	movne	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	f43f af4a 	beq.w	8006194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3770      	adds	r7, #112	; 0x70
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800630a:	b084      	sub	sp, #16
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	f107 001c 	add.w	r0, r7, #28
 8006318:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa6f 	bl	800680c <USB_CoreReset>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
 8006344:	e005      	b.n	8006352 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800635e:	b004      	add	sp, #16
 8006360:	4770      	bx	lr

08006362 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d115      	bne.n	80063d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063b2:	2001      	movs	r0, #1
 80063b4:	f7fb ff04 	bl	80021c0 <HAL_Delay>
      ms++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fa16 	bl	80067f0 <USB_GetMode>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d01e      	beq.n	8006408 <USB_SetCurrentMode+0x84>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b31      	cmp	r3, #49	; 0x31
 80063ce:	d9f0      	bls.n	80063b2 <USB_SetCurrentMode+0x2e>
 80063d0:	e01a      	b.n	8006408 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063d2:	78fb      	ldrb	r3, [r7, #3]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d115      	bne.n	8006404 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063e4:	2001      	movs	r0, #1
 80063e6:	f7fb feeb 	bl	80021c0 <HAL_Delay>
      ms++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f9fd 	bl	80067f0 <USB_GetMode>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <USB_SetCurrentMode+0x84>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b31      	cmp	r3, #49	; 0x31
 8006400:	d9f0      	bls.n	80063e4 <USB_SetCurrentMode+0x60>
 8006402:	e001      	b.n	8006408 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e005      	b.n	8006414 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b32      	cmp	r3, #50	; 0x32
 800640c:	d101      	bne.n	8006412 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800641c:	b084      	sub	sp, #16
 800641e:	b580      	push	{r7, lr}
 8006420:	b086      	sub	sp, #24
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800642a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	e009      	b.n	8006450 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	3340      	adds	r3, #64	; 0x40
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	2200      	movs	r2, #0
 8006448:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3301      	adds	r3, #1
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b0e      	cmp	r3, #14
 8006454:	d9f2      	bls.n	800643c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d11c      	bne.n	8006496 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646a:	f043 0302 	orr.w	r3, r3, #2
 800646e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e005      	b.n	80064a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064a8:	461a      	mov	r2, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	4619      	mov	r1, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	461a      	mov	r2, r3
 80064be:	680b      	ldr	r3, [r1, #0]
 80064c0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064c2:	2103      	movs	r1, #3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f959 	bl	800677c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ca:	2110      	movs	r1, #16
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f8f1 	bl	80066b4 <USB_FlushTxFifo>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f91d 	bl	800671c <USB_FlushRxFifo>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	461a      	mov	r2, r3
 80064f4:	2300      	movs	r3, #0
 80064f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fe:	461a      	mov	r2, r3
 8006500:	2300      	movs	r3, #0
 8006502:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	461a      	mov	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e043      	b.n	800659e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652c:	d118      	bne.n	8006560 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	461a      	mov	r2, r3
 8006542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	e013      	b.n	8006572 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006556:	461a      	mov	r2, r3
 8006558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e008      	b.n	8006572 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	461a      	mov	r2, r3
 800656e:	2300      	movs	r3, #0
 8006570:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	461a      	mov	r2, r3
 8006580:	2300      	movs	r3, #0
 8006582:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	461a      	mov	r2, r3
 8006592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006596:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3301      	adds	r3, #1
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d3b7      	bcc.n	8006516 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	e043      	b.n	8006634 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c2:	d118      	bne.n	80065f6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	461a      	mov	r2, r3
 80065d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e013      	b.n	8006608 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ec:	461a      	mov	r2, r3
 80065ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	e008      	b.n	8006608 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	461a      	mov	r2, r3
 8006604:	2300      	movs	r3, #0
 8006606:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	461a      	mov	r2, r3
 8006616:	2300      	movs	r3, #0
 8006618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800662c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3301      	adds	r3, #1
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	429a      	cmp	r2, r3
 800663a:	d3b7      	bcc.n	80065ac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800664e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800665c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f043 0210 	orr.w	r2, r3, #16
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <USB_DevInit+0x294>)
 8006670:	4313      	orrs	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f043 0208 	orr.w	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d107      	bne.n	800669e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006696:	f043 0304 	orr.w	r3, r3, #4
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066aa:	b004      	add	sp, #16
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	803c3800 	.word	0x803c3800

080066b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <USB_FlushTxFifo+0x64>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e01b      	b.n	800670c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	daf2      	bge.n	80066c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	019b      	lsls	r3, r3, #6
 80066e4:	f043 0220 	orr.w	r2, r3, #32
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a08      	ldr	r2, [pc, #32]	; (8006718 <USB_FlushTxFifo+0x64>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e006      	b.n	800670c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b20      	cmp	r3, #32
 8006708:	d0f0      	beq.n	80066ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	00030d40 	.word	0x00030d40

0800671c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a11      	ldr	r2, [pc, #68]	; (8006778 <USB_FlushRxFifo+0x5c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e018      	b.n	800676c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	daf2      	bge.n	8006728 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2210      	movs	r2, #16
 800674a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a08      	ldr	r2, [pc, #32]	; (8006778 <USB_FlushRxFifo+0x5c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d901      	bls.n	800675e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b10      	cmp	r3, #16
 8006768:	d0f0      	beq.n	800674c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	00030d40 	.word	0x00030d40

0800677c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067dc:	f043 0302 	orr.w	r3, r3, #2
 80067e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0301 	and.w	r3, r3, #1
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <USB_CoreReset+0x64>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e01b      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	daf2      	bge.n	8006818 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f043 0201 	orr.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a09      	ldr	r2, [pc, #36]	; (8006870 <USB_CoreReset+0x64>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d901      	bls.n	8006854 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e006      	b.n	8006862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d0f0      	beq.n	8006842 <USB_CoreReset+0x36>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	00030d40 	.word	0x00030d40

08006874 <__errno>:
 8006874:	4b01      	ldr	r3, [pc, #4]	; (800687c <__errno+0x8>)
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	2000000c 	.word	0x2000000c

08006880 <__libc_init_array>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4d0d      	ldr	r5, [pc, #52]	; (80068b8 <__libc_init_array+0x38>)
 8006884:	4c0d      	ldr	r4, [pc, #52]	; (80068bc <__libc_init_array+0x3c>)
 8006886:	1b64      	subs	r4, r4, r5
 8006888:	10a4      	asrs	r4, r4, #2
 800688a:	2600      	movs	r6, #0
 800688c:	42a6      	cmp	r6, r4
 800688e:	d109      	bne.n	80068a4 <__libc_init_array+0x24>
 8006890:	4d0b      	ldr	r5, [pc, #44]	; (80068c0 <__libc_init_array+0x40>)
 8006892:	4c0c      	ldr	r4, [pc, #48]	; (80068c4 <__libc_init_array+0x44>)
 8006894:	f001 fa28 	bl	8007ce8 <_init>
 8006898:	1b64      	subs	r4, r4, r5
 800689a:	10a4      	asrs	r4, r4, #2
 800689c:	2600      	movs	r6, #0
 800689e:	42a6      	cmp	r6, r4
 80068a0:	d105      	bne.n	80068ae <__libc_init_array+0x2e>
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a8:	4798      	blx	r3
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7ee      	b.n	800688c <__libc_init_array+0xc>
 80068ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b2:	4798      	blx	r3
 80068b4:	3601      	adds	r6, #1
 80068b6:	e7f2      	b.n	800689e <__libc_init_array+0x1e>
 80068b8:	08007fb4 	.word	0x08007fb4
 80068bc:	08007fb4 	.word	0x08007fb4
 80068c0:	08007fb4 	.word	0x08007fb4
 80068c4:	08007fb8 	.word	0x08007fb8

080068c8 <memset>:
 80068c8:	4402      	add	r2, r0
 80068ca:	4603      	mov	r3, r0
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d100      	bne.n	80068d2 <memset+0xa>
 80068d0:	4770      	bx	lr
 80068d2:	f803 1b01 	strb.w	r1, [r3], #1
 80068d6:	e7f9      	b.n	80068cc <memset+0x4>

080068d8 <iprintf>:
 80068d8:	b40f      	push	{r0, r1, r2, r3}
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <iprintf+0x2c>)
 80068dc:	b513      	push	{r0, r1, r4, lr}
 80068de:	681c      	ldr	r4, [r3, #0]
 80068e0:	b124      	cbz	r4, 80068ec <iprintf+0x14>
 80068e2:	69a3      	ldr	r3, [r4, #24]
 80068e4:	b913      	cbnz	r3, 80068ec <iprintf+0x14>
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 fa5e 	bl	8006da8 <__sinit>
 80068ec:	ab05      	add	r3, sp, #20
 80068ee:	9a04      	ldr	r2, [sp, #16]
 80068f0:	68a1      	ldr	r1, [r4, #8]
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 fc67 	bl	80071c8 <_vfiprintf_r>
 80068fa:	b002      	add	sp, #8
 80068fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006900:	b004      	add	sp, #16
 8006902:	4770      	bx	lr
 8006904:	2000000c 	.word	0x2000000c

08006908 <_puts_r>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	460e      	mov	r6, r1
 800690c:	4605      	mov	r5, r0
 800690e:	b118      	cbz	r0, 8006918 <_puts_r+0x10>
 8006910:	6983      	ldr	r3, [r0, #24]
 8006912:	b90b      	cbnz	r3, 8006918 <_puts_r+0x10>
 8006914:	f000 fa48 	bl	8006da8 <__sinit>
 8006918:	69ab      	ldr	r3, [r5, #24]
 800691a:	68ac      	ldr	r4, [r5, #8]
 800691c:	b913      	cbnz	r3, 8006924 <_puts_r+0x1c>
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fa42 	bl	8006da8 <__sinit>
 8006924:	4b2c      	ldr	r3, [pc, #176]	; (80069d8 <_puts_r+0xd0>)
 8006926:	429c      	cmp	r4, r3
 8006928:	d120      	bne.n	800696c <_puts_r+0x64>
 800692a:	686c      	ldr	r4, [r5, #4]
 800692c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800692e:	07db      	lsls	r3, r3, #31
 8006930:	d405      	bmi.n	800693e <_puts_r+0x36>
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	0598      	lsls	r0, r3, #22
 8006936:	d402      	bmi.n	800693e <_puts_r+0x36>
 8006938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800693a:	f000 fad3 	bl	8006ee4 <__retarget_lock_acquire_recursive>
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	0719      	lsls	r1, r3, #28
 8006942:	d51d      	bpl.n	8006980 <_puts_r+0x78>
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	b1db      	cbz	r3, 8006980 <_puts_r+0x78>
 8006948:	3e01      	subs	r6, #1
 800694a:	68a3      	ldr	r3, [r4, #8]
 800694c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006950:	3b01      	subs	r3, #1
 8006952:	60a3      	str	r3, [r4, #8]
 8006954:	bb39      	cbnz	r1, 80069a6 <_puts_r+0x9e>
 8006956:	2b00      	cmp	r3, #0
 8006958:	da38      	bge.n	80069cc <_puts_r+0xc4>
 800695a:	4622      	mov	r2, r4
 800695c:	210a      	movs	r1, #10
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f848 	bl	80069f4 <__swbuf_r>
 8006964:	3001      	adds	r0, #1
 8006966:	d011      	beq.n	800698c <_puts_r+0x84>
 8006968:	250a      	movs	r5, #10
 800696a:	e011      	b.n	8006990 <_puts_r+0x88>
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <_puts_r+0xd4>)
 800696e:	429c      	cmp	r4, r3
 8006970:	d101      	bne.n	8006976 <_puts_r+0x6e>
 8006972:	68ac      	ldr	r4, [r5, #8]
 8006974:	e7da      	b.n	800692c <_puts_r+0x24>
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <_puts_r+0xd8>)
 8006978:	429c      	cmp	r4, r3
 800697a:	bf08      	it	eq
 800697c:	68ec      	ldreq	r4, [r5, #12]
 800697e:	e7d5      	b.n	800692c <_puts_r+0x24>
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f000 f888 	bl	8006a98 <__swsetup_r>
 8006988:	2800      	cmp	r0, #0
 800698a:	d0dd      	beq.n	8006948 <_puts_r+0x40>
 800698c:	f04f 35ff 	mov.w	r5, #4294967295
 8006990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006992:	07da      	lsls	r2, r3, #31
 8006994:	d405      	bmi.n	80069a2 <_puts_r+0x9a>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	059b      	lsls	r3, r3, #22
 800699a:	d402      	bmi.n	80069a2 <_puts_r+0x9a>
 800699c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800699e:	f000 faa2 	bl	8006ee6 <__retarget_lock_release_recursive>
 80069a2:	4628      	mov	r0, r5
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da04      	bge.n	80069b4 <_puts_r+0xac>
 80069aa:	69a2      	ldr	r2, [r4, #24]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	dc06      	bgt.n	80069be <_puts_r+0xb6>
 80069b0:	290a      	cmp	r1, #10
 80069b2:	d004      	beq.n	80069be <_puts_r+0xb6>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	6022      	str	r2, [r4, #0]
 80069ba:	7019      	strb	r1, [r3, #0]
 80069bc:	e7c5      	b.n	800694a <_puts_r+0x42>
 80069be:	4622      	mov	r2, r4
 80069c0:	4628      	mov	r0, r5
 80069c2:	f000 f817 	bl	80069f4 <__swbuf_r>
 80069c6:	3001      	adds	r0, #1
 80069c8:	d1bf      	bne.n	800694a <_puts_r+0x42>
 80069ca:	e7df      	b.n	800698c <_puts_r+0x84>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	250a      	movs	r5, #10
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	6022      	str	r2, [r4, #0]
 80069d4:	701d      	strb	r5, [r3, #0]
 80069d6:	e7db      	b.n	8006990 <_puts_r+0x88>
 80069d8:	08007f38 	.word	0x08007f38
 80069dc:	08007f58 	.word	0x08007f58
 80069e0:	08007f18 	.word	0x08007f18

080069e4 <puts>:
 80069e4:	4b02      	ldr	r3, [pc, #8]	; (80069f0 <puts+0xc>)
 80069e6:	4601      	mov	r1, r0
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	f7ff bf8d 	b.w	8006908 <_puts_r>
 80069ee:	bf00      	nop
 80069f0:	2000000c 	.word	0x2000000c

080069f4 <__swbuf_r>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	460e      	mov	r6, r1
 80069f8:	4614      	mov	r4, r2
 80069fa:	4605      	mov	r5, r0
 80069fc:	b118      	cbz	r0, 8006a06 <__swbuf_r+0x12>
 80069fe:	6983      	ldr	r3, [r0, #24]
 8006a00:	b90b      	cbnz	r3, 8006a06 <__swbuf_r+0x12>
 8006a02:	f000 f9d1 	bl	8006da8 <__sinit>
 8006a06:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <__swbuf_r+0x98>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d12b      	bne.n	8006a64 <__swbuf_r+0x70>
 8006a0c:	686c      	ldr	r4, [r5, #4]
 8006a0e:	69a3      	ldr	r3, [r4, #24]
 8006a10:	60a3      	str	r3, [r4, #8]
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	071a      	lsls	r2, r3, #28
 8006a16:	d52f      	bpl.n	8006a78 <__swbuf_r+0x84>
 8006a18:	6923      	ldr	r3, [r4, #16]
 8006a1a:	b36b      	cbz	r3, 8006a78 <__swbuf_r+0x84>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	6820      	ldr	r0, [r4, #0]
 8006a20:	1ac0      	subs	r0, r0, r3
 8006a22:	6963      	ldr	r3, [r4, #20]
 8006a24:	b2f6      	uxtb	r6, r6
 8006a26:	4283      	cmp	r3, r0
 8006a28:	4637      	mov	r7, r6
 8006a2a:	dc04      	bgt.n	8006a36 <__swbuf_r+0x42>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 f926 	bl	8006c80 <_fflush_r>
 8006a34:	bb30      	cbnz	r0, 8006a84 <__swbuf_r+0x90>
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	60a3      	str	r3, [r4, #8]
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	6022      	str	r2, [r4, #0]
 8006a42:	701e      	strb	r6, [r3, #0]
 8006a44:	6963      	ldr	r3, [r4, #20]
 8006a46:	3001      	adds	r0, #1
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	d004      	beq.n	8006a56 <__swbuf_r+0x62>
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	07db      	lsls	r3, r3, #31
 8006a50:	d506      	bpl.n	8006a60 <__swbuf_r+0x6c>
 8006a52:	2e0a      	cmp	r6, #10
 8006a54:	d104      	bne.n	8006a60 <__swbuf_r+0x6c>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 f911 	bl	8006c80 <_fflush_r>
 8006a5e:	b988      	cbnz	r0, 8006a84 <__swbuf_r+0x90>
 8006a60:	4638      	mov	r0, r7
 8006a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <__swbuf_r+0x9c>)
 8006a66:	429c      	cmp	r4, r3
 8006a68:	d101      	bne.n	8006a6e <__swbuf_r+0x7a>
 8006a6a:	68ac      	ldr	r4, [r5, #8]
 8006a6c:	e7cf      	b.n	8006a0e <__swbuf_r+0x1a>
 8006a6e:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <__swbuf_r+0xa0>)
 8006a70:	429c      	cmp	r4, r3
 8006a72:	bf08      	it	eq
 8006a74:	68ec      	ldreq	r4, [r5, #12]
 8006a76:	e7ca      	b.n	8006a0e <__swbuf_r+0x1a>
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 f80c 	bl	8006a98 <__swsetup_r>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d0cb      	beq.n	8006a1c <__swbuf_r+0x28>
 8006a84:	f04f 37ff 	mov.w	r7, #4294967295
 8006a88:	e7ea      	b.n	8006a60 <__swbuf_r+0x6c>
 8006a8a:	bf00      	nop
 8006a8c:	08007f38 	.word	0x08007f38
 8006a90:	08007f58 	.word	0x08007f58
 8006a94:	08007f18 	.word	0x08007f18

08006a98 <__swsetup_r>:
 8006a98:	4b32      	ldr	r3, [pc, #200]	; (8006b64 <__swsetup_r+0xcc>)
 8006a9a:	b570      	push	{r4, r5, r6, lr}
 8006a9c:	681d      	ldr	r5, [r3, #0]
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	b125      	cbz	r5, 8006aae <__swsetup_r+0x16>
 8006aa4:	69ab      	ldr	r3, [r5, #24]
 8006aa6:	b913      	cbnz	r3, 8006aae <__swsetup_r+0x16>
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f000 f97d 	bl	8006da8 <__sinit>
 8006aae:	4b2e      	ldr	r3, [pc, #184]	; (8006b68 <__swsetup_r+0xd0>)
 8006ab0:	429c      	cmp	r4, r3
 8006ab2:	d10f      	bne.n	8006ad4 <__swsetup_r+0x3c>
 8006ab4:	686c      	ldr	r4, [r5, #4]
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006abc:	0719      	lsls	r1, r3, #28
 8006abe:	d42c      	bmi.n	8006b1a <__swsetup_r+0x82>
 8006ac0:	06dd      	lsls	r5, r3, #27
 8006ac2:	d411      	bmi.n	8006ae8 <__swsetup_r+0x50>
 8006ac4:	2309      	movs	r3, #9
 8006ac6:	6033      	str	r3, [r6, #0]
 8006ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad2:	e03e      	b.n	8006b52 <__swsetup_r+0xba>
 8006ad4:	4b25      	ldr	r3, [pc, #148]	; (8006b6c <__swsetup_r+0xd4>)
 8006ad6:	429c      	cmp	r4, r3
 8006ad8:	d101      	bne.n	8006ade <__swsetup_r+0x46>
 8006ada:	68ac      	ldr	r4, [r5, #8]
 8006adc:	e7eb      	b.n	8006ab6 <__swsetup_r+0x1e>
 8006ade:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <__swsetup_r+0xd8>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	bf08      	it	eq
 8006ae4:	68ec      	ldreq	r4, [r5, #12]
 8006ae6:	e7e6      	b.n	8006ab6 <__swsetup_r+0x1e>
 8006ae8:	0758      	lsls	r0, r3, #29
 8006aea:	d512      	bpl.n	8006b12 <__swsetup_r+0x7a>
 8006aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aee:	b141      	cbz	r1, 8006b02 <__swsetup_r+0x6a>
 8006af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af4:	4299      	cmp	r1, r3
 8006af6:	d002      	beq.n	8006afe <__swsetup_r+0x66>
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 fa5b 	bl	8006fb4 <_free_r>
 8006afe:	2300      	movs	r3, #0
 8006b00:	6363      	str	r3, [r4, #52]	; 0x34
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f043 0308 	orr.w	r3, r3, #8
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	b94b      	cbnz	r3, 8006b32 <__swsetup_r+0x9a>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b28:	d003      	beq.n	8006b32 <__swsetup_r+0x9a>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f000 fa01 	bl	8006f34 <__smakebuf_r>
 8006b32:	89a0      	ldrh	r0, [r4, #12]
 8006b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b38:	f010 0301 	ands.w	r3, r0, #1
 8006b3c:	d00a      	beq.n	8006b54 <__swsetup_r+0xbc>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60a3      	str	r3, [r4, #8]
 8006b42:	6963      	ldr	r3, [r4, #20]
 8006b44:	425b      	negs	r3, r3
 8006b46:	61a3      	str	r3, [r4, #24]
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	b943      	cbnz	r3, 8006b5e <__swsetup_r+0xc6>
 8006b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b50:	d1ba      	bne.n	8006ac8 <__swsetup_r+0x30>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	0781      	lsls	r1, r0, #30
 8006b56:	bf58      	it	pl
 8006b58:	6963      	ldrpl	r3, [r4, #20]
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	e7f4      	b.n	8006b48 <__swsetup_r+0xb0>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e7f7      	b.n	8006b52 <__swsetup_r+0xba>
 8006b62:	bf00      	nop
 8006b64:	2000000c 	.word	0x2000000c
 8006b68:	08007f38 	.word	0x08007f38
 8006b6c:	08007f58 	.word	0x08007f58
 8006b70:	08007f18 	.word	0x08007f18

08006b74 <__sflush_r>:
 8006b74:	898a      	ldrh	r2, [r1, #12]
 8006b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	0710      	lsls	r0, r2, #28
 8006b7e:	460c      	mov	r4, r1
 8006b80:	d458      	bmi.n	8006c34 <__sflush_r+0xc0>
 8006b82:	684b      	ldr	r3, [r1, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dc05      	bgt.n	8006b94 <__sflush_r+0x20>
 8006b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dc02      	bgt.n	8006b94 <__sflush_r+0x20>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	d0f9      	beq.n	8006b8e <__sflush_r+0x1a>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ba0:	682f      	ldr	r7, [r5, #0]
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	d032      	beq.n	8006c0c <__sflush_r+0x98>
 8006ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	075a      	lsls	r2, r3, #29
 8006bac:	d505      	bpl.n	8006bba <__sflush_r+0x46>
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	1ac0      	subs	r0, r0, r3
 8006bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bb4:	b10b      	cbz	r3, 8006bba <__sflush_r+0x46>
 8006bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb8:	1ac0      	subs	r0, r0, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bc0:	6a21      	ldr	r1, [r4, #32]
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b0      	blx	r6
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	d106      	bne.n	8006bda <__sflush_r+0x66>
 8006bcc:	6829      	ldr	r1, [r5, #0]
 8006bce:	291d      	cmp	r1, #29
 8006bd0:	d82c      	bhi.n	8006c2c <__sflush_r+0xb8>
 8006bd2:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <__sflush_r+0x108>)
 8006bd4:	40ca      	lsrs	r2, r1
 8006bd6:	07d6      	lsls	r6, r2, #31
 8006bd8:	d528      	bpl.n	8006c2c <__sflush_r+0xb8>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	6062      	str	r2, [r4, #4]
 8006bde:	04d9      	lsls	r1, r3, #19
 8006be0:	6922      	ldr	r2, [r4, #16]
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	d504      	bpl.n	8006bf0 <__sflush_r+0x7c>
 8006be6:	1c42      	adds	r2, r0, #1
 8006be8:	d101      	bne.n	8006bee <__sflush_r+0x7a>
 8006bea:	682b      	ldr	r3, [r5, #0]
 8006bec:	b903      	cbnz	r3, 8006bf0 <__sflush_r+0x7c>
 8006bee:	6560      	str	r0, [r4, #84]	; 0x54
 8006bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf2:	602f      	str	r7, [r5, #0]
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	d0ca      	beq.n	8006b8e <__sflush_r+0x1a>
 8006bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	d002      	beq.n	8006c06 <__sflush_r+0x92>
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 f9d7 	bl	8006fb4 <_free_r>
 8006c06:	2000      	movs	r0, #0
 8006c08:	6360      	str	r0, [r4, #52]	; 0x34
 8006c0a:	e7c1      	b.n	8006b90 <__sflush_r+0x1c>
 8006c0c:	6a21      	ldr	r1, [r4, #32]
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b0      	blx	r6
 8006c14:	1c41      	adds	r1, r0, #1
 8006c16:	d1c7      	bne.n	8006ba8 <__sflush_r+0x34>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0c4      	beq.n	8006ba8 <__sflush_r+0x34>
 8006c1e:	2b1d      	cmp	r3, #29
 8006c20:	d001      	beq.n	8006c26 <__sflush_r+0xb2>
 8006c22:	2b16      	cmp	r3, #22
 8006c24:	d101      	bne.n	8006c2a <__sflush_r+0xb6>
 8006c26:	602f      	str	r7, [r5, #0]
 8006c28:	e7b1      	b.n	8006b8e <__sflush_r+0x1a>
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	e7ad      	b.n	8006b90 <__sflush_r+0x1c>
 8006c34:	690f      	ldr	r7, [r1, #16]
 8006c36:	2f00      	cmp	r7, #0
 8006c38:	d0a9      	beq.n	8006b8e <__sflush_r+0x1a>
 8006c3a:	0793      	lsls	r3, r2, #30
 8006c3c:	680e      	ldr	r6, [r1, #0]
 8006c3e:	bf08      	it	eq
 8006c40:	694b      	ldreq	r3, [r1, #20]
 8006c42:	600f      	str	r7, [r1, #0]
 8006c44:	bf18      	it	ne
 8006c46:	2300      	movne	r3, #0
 8006c48:	eba6 0807 	sub.w	r8, r6, r7
 8006c4c:	608b      	str	r3, [r1, #8]
 8006c4e:	f1b8 0f00 	cmp.w	r8, #0
 8006c52:	dd9c      	ble.n	8006b8e <__sflush_r+0x1a>
 8006c54:	6a21      	ldr	r1, [r4, #32]
 8006c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c58:	4643      	mov	r3, r8
 8006c5a:	463a      	mov	r2, r7
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b0      	blx	r6
 8006c60:	2800      	cmp	r0, #0
 8006c62:	dc06      	bgt.n	8006c72 <__sflush_r+0xfe>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	e78e      	b.n	8006b90 <__sflush_r+0x1c>
 8006c72:	4407      	add	r7, r0
 8006c74:	eba8 0800 	sub.w	r8, r8, r0
 8006c78:	e7e9      	b.n	8006c4e <__sflush_r+0xda>
 8006c7a:	bf00      	nop
 8006c7c:	20400001 	.word	0x20400001

08006c80 <_fflush_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	690b      	ldr	r3, [r1, #16]
 8006c84:	4605      	mov	r5, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	b913      	cbnz	r3, 8006c90 <_fflush_r+0x10>
 8006c8a:	2500      	movs	r5, #0
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	b118      	cbz	r0, 8006c9a <_fflush_r+0x1a>
 8006c92:	6983      	ldr	r3, [r0, #24]
 8006c94:	b90b      	cbnz	r3, 8006c9a <_fflush_r+0x1a>
 8006c96:	f000 f887 	bl	8006da8 <__sinit>
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <_fflush_r+0x6c>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d11b      	bne.n	8006cd8 <_fflush_r+0x58>
 8006ca0:	686c      	ldr	r4, [r5, #4]
 8006ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0ef      	beq.n	8006c8a <_fflush_r+0xa>
 8006caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cac:	07d0      	lsls	r0, r2, #31
 8006cae:	d404      	bmi.n	8006cba <_fflush_r+0x3a>
 8006cb0:	0599      	lsls	r1, r3, #22
 8006cb2:	d402      	bmi.n	8006cba <_fflush_r+0x3a>
 8006cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb6:	f000 f915 	bl	8006ee4 <__retarget_lock_acquire_recursive>
 8006cba:	4628      	mov	r0, r5
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	f7ff ff59 	bl	8006b74 <__sflush_r>
 8006cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc4:	07da      	lsls	r2, r3, #31
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	d4e0      	bmi.n	8006c8c <_fflush_r+0xc>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	059b      	lsls	r3, r3, #22
 8006cce:	d4dd      	bmi.n	8006c8c <_fflush_r+0xc>
 8006cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd2:	f000 f908 	bl	8006ee6 <__retarget_lock_release_recursive>
 8006cd6:	e7d9      	b.n	8006c8c <_fflush_r+0xc>
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <_fflush_r+0x70>)
 8006cda:	429c      	cmp	r4, r3
 8006cdc:	d101      	bne.n	8006ce2 <_fflush_r+0x62>
 8006cde:	68ac      	ldr	r4, [r5, #8]
 8006ce0:	e7df      	b.n	8006ca2 <_fflush_r+0x22>
 8006ce2:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <_fflush_r+0x74>)
 8006ce4:	429c      	cmp	r4, r3
 8006ce6:	bf08      	it	eq
 8006ce8:	68ec      	ldreq	r4, [r5, #12]
 8006cea:	e7da      	b.n	8006ca2 <_fflush_r+0x22>
 8006cec:	08007f38 	.word	0x08007f38
 8006cf0:	08007f58 	.word	0x08007f58
 8006cf4:	08007f18 	.word	0x08007f18

08006cf8 <std>:
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d06:	6083      	str	r3, [r0, #8]
 8006d08:	8181      	strh	r1, [r0, #12]
 8006d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d0c:	81c2      	strh	r2, [r0, #14]
 8006d0e:	6183      	str	r3, [r0, #24]
 8006d10:	4619      	mov	r1, r3
 8006d12:	2208      	movs	r2, #8
 8006d14:	305c      	adds	r0, #92	; 0x5c
 8006d16:	f7ff fdd7 	bl	80068c8 <memset>
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x38>)
 8006d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x3c>)
 8006d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <std+0x40>)
 8006d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x44>)
 8006d28:	6224      	str	r4, [r4, #32]
 8006d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	08007771 	.word	0x08007771
 8006d34:	08007793 	.word	0x08007793
 8006d38:	080077cb 	.word	0x080077cb
 8006d3c:	080077ef 	.word	0x080077ef

08006d40 <_cleanup_r>:
 8006d40:	4901      	ldr	r1, [pc, #4]	; (8006d48 <_cleanup_r+0x8>)
 8006d42:	f000 b8af 	b.w	8006ea4 <_fwalk_reent>
 8006d46:	bf00      	nop
 8006d48:	08006c81 	.word	0x08006c81

08006d4c <__sfmoreglue>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	2268      	movs	r2, #104	; 0x68
 8006d50:	1e4d      	subs	r5, r1, #1
 8006d52:	4355      	muls	r5, r2
 8006d54:	460e      	mov	r6, r1
 8006d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d5a:	f000 f997 	bl	800708c <_malloc_r>
 8006d5e:	4604      	mov	r4, r0
 8006d60:	b140      	cbz	r0, 8006d74 <__sfmoreglue+0x28>
 8006d62:	2100      	movs	r1, #0
 8006d64:	e9c0 1600 	strd	r1, r6, [r0]
 8006d68:	300c      	adds	r0, #12
 8006d6a:	60a0      	str	r0, [r4, #8]
 8006d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d70:	f7ff fdaa 	bl	80068c8 <memset>
 8006d74:	4620      	mov	r0, r4
 8006d76:	bd70      	pop	{r4, r5, r6, pc}

08006d78 <__sfp_lock_acquire>:
 8006d78:	4801      	ldr	r0, [pc, #4]	; (8006d80 <__sfp_lock_acquire+0x8>)
 8006d7a:	f000 b8b3 	b.w	8006ee4 <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	20000705 	.word	0x20000705

08006d84 <__sfp_lock_release>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__sfp_lock_release+0x8>)
 8006d86:	f000 b8ae 	b.w	8006ee6 <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	20000705 	.word	0x20000705

08006d90 <__sinit_lock_acquire>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__sinit_lock_acquire+0x8>)
 8006d92:	f000 b8a7 	b.w	8006ee4 <__retarget_lock_acquire_recursive>
 8006d96:	bf00      	nop
 8006d98:	20000706 	.word	0x20000706

08006d9c <__sinit_lock_release>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	; (8006da4 <__sinit_lock_release+0x8>)
 8006d9e:	f000 b8a2 	b.w	8006ee6 <__retarget_lock_release_recursive>
 8006da2:	bf00      	nop
 8006da4:	20000706 	.word	0x20000706

08006da8 <__sinit>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4604      	mov	r4, r0
 8006dac:	f7ff fff0 	bl	8006d90 <__sinit_lock_acquire>
 8006db0:	69a3      	ldr	r3, [r4, #24]
 8006db2:	b11b      	cbz	r3, 8006dbc <__sinit+0x14>
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f7ff bff0 	b.w	8006d9c <__sinit_lock_release>
 8006dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8006dc2:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <__sinit+0x68>)
 8006dc4:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <__sinit+0x6c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	bf04      	itt	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	61a3      	streq	r3, [r4, #24]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f820 	bl	8006e18 <__sfp>
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f81c 	bl	8006e18 <__sfp>
 8006de0:	60a0      	str	r0, [r4, #8]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f818 	bl	8006e18 <__sfp>
 8006de8:	2200      	movs	r2, #0
 8006dea:	60e0      	str	r0, [r4, #12]
 8006dec:	2104      	movs	r1, #4
 8006dee:	6860      	ldr	r0, [r4, #4]
 8006df0:	f7ff ff82 	bl	8006cf8 <std>
 8006df4:	68a0      	ldr	r0, [r4, #8]
 8006df6:	2201      	movs	r2, #1
 8006df8:	2109      	movs	r1, #9
 8006dfa:	f7ff ff7d 	bl	8006cf8 <std>
 8006dfe:	68e0      	ldr	r0, [r4, #12]
 8006e00:	2202      	movs	r2, #2
 8006e02:	2112      	movs	r1, #18
 8006e04:	f7ff ff78 	bl	8006cf8 <std>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	61a3      	str	r3, [r4, #24]
 8006e0c:	e7d2      	b.n	8006db4 <__sinit+0xc>
 8006e0e:	bf00      	nop
 8006e10:	08007f14 	.word	0x08007f14
 8006e14:	08006d41 	.word	0x08006d41

08006e18 <__sfp>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	f7ff ffac 	bl	8006d78 <__sfp_lock_acquire>
 8006e20:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <__sfp+0x84>)
 8006e22:	681e      	ldr	r6, [r3, #0]
 8006e24:	69b3      	ldr	r3, [r6, #24]
 8006e26:	b913      	cbnz	r3, 8006e2e <__sfp+0x16>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7ff ffbd 	bl	8006da8 <__sinit>
 8006e2e:	3648      	adds	r6, #72	; 0x48
 8006e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	d503      	bpl.n	8006e40 <__sfp+0x28>
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	b30b      	cbz	r3, 8006e80 <__sfp+0x68>
 8006e3c:	6836      	ldr	r6, [r6, #0]
 8006e3e:	e7f7      	b.n	8006e30 <__sfp+0x18>
 8006e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e44:	b9d5      	cbnz	r5, 8006e7c <__sfp+0x64>
 8006e46:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <__sfp+0x88>)
 8006e48:	60e3      	str	r3, [r4, #12]
 8006e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e50:	f000 f847 	bl	8006ee2 <__retarget_lock_init_recursive>
 8006e54:	f7ff ff96 	bl	8006d84 <__sfp_lock_release>
 8006e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e60:	6025      	str	r5, [r4, #0]
 8006e62:	61a5      	str	r5, [r4, #24]
 8006e64:	2208      	movs	r2, #8
 8006e66:	4629      	mov	r1, r5
 8006e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e6c:	f7ff fd2c 	bl	80068c8 <memset>
 8006e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e78:	4620      	mov	r0, r4
 8006e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7c:	3468      	adds	r4, #104	; 0x68
 8006e7e:	e7d9      	b.n	8006e34 <__sfp+0x1c>
 8006e80:	2104      	movs	r1, #4
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff ff62 	bl	8006d4c <__sfmoreglue>
 8006e88:	4604      	mov	r4, r0
 8006e8a:	6030      	str	r0, [r6, #0]
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1d5      	bne.n	8006e3c <__sfp+0x24>
 8006e90:	f7ff ff78 	bl	8006d84 <__sfp_lock_release>
 8006e94:	230c      	movs	r3, #12
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	e7ee      	b.n	8006e78 <__sfp+0x60>
 8006e9a:	bf00      	nop
 8006e9c:	08007f14 	.word	0x08007f14
 8006ea0:	ffff0001 	.word	0xffff0001

08006ea4 <_fwalk_reent>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	4688      	mov	r8, r1
 8006eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eb0:	2700      	movs	r7, #0
 8006eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8006eba:	d505      	bpl.n	8006ec8 <_fwalk_reent+0x24>
 8006ebc:	6824      	ldr	r4, [r4, #0]
 8006ebe:	2c00      	cmp	r4, #0
 8006ec0:	d1f7      	bne.n	8006eb2 <_fwalk_reent+0xe>
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec8:	89ab      	ldrh	r3, [r5, #12]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d907      	bls.n	8006ede <_fwalk_reent+0x3a>
 8006ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	d003      	beq.n	8006ede <_fwalk_reent+0x3a>
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4630      	mov	r0, r6
 8006eda:	47c0      	blx	r8
 8006edc:	4307      	orrs	r7, r0
 8006ede:	3568      	adds	r5, #104	; 0x68
 8006ee0:	e7e9      	b.n	8006eb6 <_fwalk_reent+0x12>

08006ee2 <__retarget_lock_init_recursive>:
 8006ee2:	4770      	bx	lr

08006ee4 <__retarget_lock_acquire_recursive>:
 8006ee4:	4770      	bx	lr

08006ee6 <__retarget_lock_release_recursive>:
 8006ee6:	4770      	bx	lr

08006ee8 <__swhatbuf_r>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	460e      	mov	r6, r1
 8006eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	b096      	sub	sp, #88	; 0x58
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	461d      	mov	r5, r3
 8006ef8:	da08      	bge.n	8006f0c <__swhatbuf_r+0x24>
 8006efa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	602a      	str	r2, [r5, #0]
 8006f02:	061a      	lsls	r2, r3, #24
 8006f04:	d410      	bmi.n	8006f28 <__swhatbuf_r+0x40>
 8006f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f0a:	e00e      	b.n	8006f2a <__swhatbuf_r+0x42>
 8006f0c:	466a      	mov	r2, sp
 8006f0e:	f000 fc95 	bl	800783c <_fstat_r>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	dbf1      	blt.n	8006efa <__swhatbuf_r+0x12>
 8006f16:	9a01      	ldr	r2, [sp, #4]
 8006f18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f20:	425a      	negs	r2, r3
 8006f22:	415a      	adcs	r2, r3
 8006f24:	602a      	str	r2, [r5, #0]
 8006f26:	e7ee      	b.n	8006f06 <__swhatbuf_r+0x1e>
 8006f28:	2340      	movs	r3, #64	; 0x40
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	b016      	add	sp, #88	; 0x58
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f34 <__smakebuf_r>:
 8006f34:	898b      	ldrh	r3, [r1, #12]
 8006f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f38:	079d      	lsls	r5, r3, #30
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	d507      	bpl.n	8006f50 <__smakebuf_r+0x1c>
 8006f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	6163      	str	r3, [r4, #20]
 8006f4c:	b002      	add	sp, #8
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
 8006f50:	ab01      	add	r3, sp, #4
 8006f52:	466a      	mov	r2, sp
 8006f54:	f7ff ffc8 	bl	8006ee8 <__swhatbuf_r>
 8006f58:	9900      	ldr	r1, [sp, #0]
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f000 f895 	bl	800708c <_malloc_r>
 8006f62:	b948      	cbnz	r0, 8006f78 <__smakebuf_r+0x44>
 8006f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f68:	059a      	lsls	r2, r3, #22
 8006f6a:	d4ef      	bmi.n	8006f4c <__smakebuf_r+0x18>
 8006f6c:	f023 0303 	bic.w	r3, r3, #3
 8006f70:	f043 0302 	orr.w	r3, r3, #2
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	e7e3      	b.n	8006f40 <__smakebuf_r+0xc>
 8006f78:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <__smakebuf_r+0x7c>)
 8006f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	6020      	str	r0, [r4, #0]
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	6163      	str	r3, [r4, #20]
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	6120      	str	r0, [r4, #16]
 8006f8e:	b15b      	cbz	r3, 8006fa8 <__smakebuf_r+0x74>
 8006f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f94:	4630      	mov	r0, r6
 8006f96:	f000 fc63 	bl	8007860 <_isatty_r>
 8006f9a:	b128      	cbz	r0, 8006fa8 <__smakebuf_r+0x74>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	89a0      	ldrh	r0, [r4, #12]
 8006faa:	4305      	orrs	r5, r0
 8006fac:	81a5      	strh	r5, [r4, #12]
 8006fae:	e7cd      	b.n	8006f4c <__smakebuf_r+0x18>
 8006fb0:	08006d41 	.word	0x08006d41

08006fb4 <_free_r>:
 8006fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	d044      	beq.n	8007044 <_free_r+0x90>
 8006fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fbe:	9001      	str	r0, [sp, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fc6:	bfb8      	it	lt
 8006fc8:	18e4      	addlt	r4, r4, r3
 8006fca:	f000 fc6b 	bl	80078a4 <__malloc_lock>
 8006fce:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <_free_r+0x94>)
 8006fd0:	9801      	ldr	r0, [sp, #4]
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	b933      	cbnz	r3, 8006fe4 <_free_r+0x30>
 8006fd6:	6063      	str	r3, [r4, #4]
 8006fd8:	6014      	str	r4, [r2, #0]
 8006fda:	b003      	add	sp, #12
 8006fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe0:	f000 bc66 	b.w	80078b0 <__malloc_unlock>
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d908      	bls.n	8006ffa <_free_r+0x46>
 8006fe8:	6825      	ldr	r5, [r4, #0]
 8006fea:	1961      	adds	r1, r4, r5
 8006fec:	428b      	cmp	r3, r1
 8006fee:	bf01      	itttt	eq
 8006ff0:	6819      	ldreq	r1, [r3, #0]
 8006ff2:	685b      	ldreq	r3, [r3, #4]
 8006ff4:	1949      	addeq	r1, r1, r5
 8006ff6:	6021      	streq	r1, [r4, #0]
 8006ff8:	e7ed      	b.n	8006fd6 <_free_r+0x22>
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b10b      	cbz	r3, 8007004 <_free_r+0x50>
 8007000:	42a3      	cmp	r3, r4
 8007002:	d9fa      	bls.n	8006ffa <_free_r+0x46>
 8007004:	6811      	ldr	r1, [r2, #0]
 8007006:	1855      	adds	r5, r2, r1
 8007008:	42a5      	cmp	r5, r4
 800700a:	d10b      	bne.n	8007024 <_free_r+0x70>
 800700c:	6824      	ldr	r4, [r4, #0]
 800700e:	4421      	add	r1, r4
 8007010:	1854      	adds	r4, r2, r1
 8007012:	42a3      	cmp	r3, r4
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	d1e0      	bne.n	8006fda <_free_r+0x26>
 8007018:	681c      	ldr	r4, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	6053      	str	r3, [r2, #4]
 800701e:	4421      	add	r1, r4
 8007020:	6011      	str	r1, [r2, #0]
 8007022:	e7da      	b.n	8006fda <_free_r+0x26>
 8007024:	d902      	bls.n	800702c <_free_r+0x78>
 8007026:	230c      	movs	r3, #12
 8007028:	6003      	str	r3, [r0, #0]
 800702a:	e7d6      	b.n	8006fda <_free_r+0x26>
 800702c:	6825      	ldr	r5, [r4, #0]
 800702e:	1961      	adds	r1, r4, r5
 8007030:	428b      	cmp	r3, r1
 8007032:	bf04      	itt	eq
 8007034:	6819      	ldreq	r1, [r3, #0]
 8007036:	685b      	ldreq	r3, [r3, #4]
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	bf04      	itt	eq
 800703c:	1949      	addeq	r1, r1, r5
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	6054      	str	r4, [r2, #4]
 8007042:	e7ca      	b.n	8006fda <_free_r+0x26>
 8007044:	b003      	add	sp, #12
 8007046:	bd30      	pop	{r4, r5, pc}
 8007048:	20000708 	.word	0x20000708

0800704c <sbrk_aligned>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4e0e      	ldr	r6, [pc, #56]	; (8007088 <sbrk_aligned+0x3c>)
 8007050:	460c      	mov	r4, r1
 8007052:	6831      	ldr	r1, [r6, #0]
 8007054:	4605      	mov	r5, r0
 8007056:	b911      	cbnz	r1, 800705e <sbrk_aligned+0x12>
 8007058:	f000 fb7a 	bl	8007750 <_sbrk_r>
 800705c:	6030      	str	r0, [r6, #0]
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f000 fb75 	bl	8007750 <_sbrk_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d00a      	beq.n	8007080 <sbrk_aligned+0x34>
 800706a:	1cc4      	adds	r4, r0, #3
 800706c:	f024 0403 	bic.w	r4, r4, #3
 8007070:	42a0      	cmp	r0, r4
 8007072:	d007      	beq.n	8007084 <sbrk_aligned+0x38>
 8007074:	1a21      	subs	r1, r4, r0
 8007076:	4628      	mov	r0, r5
 8007078:	f000 fb6a 	bl	8007750 <_sbrk_r>
 800707c:	3001      	adds	r0, #1
 800707e:	d101      	bne.n	8007084 <sbrk_aligned+0x38>
 8007080:	f04f 34ff 	mov.w	r4, #4294967295
 8007084:	4620      	mov	r0, r4
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	2000070c 	.word	0x2000070c

0800708c <_malloc_r>:
 800708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007090:	1ccd      	adds	r5, r1, #3
 8007092:	f025 0503 	bic.w	r5, r5, #3
 8007096:	3508      	adds	r5, #8
 8007098:	2d0c      	cmp	r5, #12
 800709a:	bf38      	it	cc
 800709c:	250c      	movcc	r5, #12
 800709e:	2d00      	cmp	r5, #0
 80070a0:	4607      	mov	r7, r0
 80070a2:	db01      	blt.n	80070a8 <_malloc_r+0x1c>
 80070a4:	42a9      	cmp	r1, r5
 80070a6:	d905      	bls.n	80070b4 <_malloc_r+0x28>
 80070a8:	230c      	movs	r3, #12
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	2600      	movs	r6, #0
 80070ae:	4630      	mov	r0, r6
 80070b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b4:	4e2e      	ldr	r6, [pc, #184]	; (8007170 <_malloc_r+0xe4>)
 80070b6:	f000 fbf5 	bl	80078a4 <__malloc_lock>
 80070ba:	6833      	ldr	r3, [r6, #0]
 80070bc:	461c      	mov	r4, r3
 80070be:	bb34      	cbnz	r4, 800710e <_malloc_r+0x82>
 80070c0:	4629      	mov	r1, r5
 80070c2:	4638      	mov	r0, r7
 80070c4:	f7ff ffc2 	bl	800704c <sbrk_aligned>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	4604      	mov	r4, r0
 80070cc:	d14d      	bne.n	800716a <_malloc_r+0xde>
 80070ce:	6834      	ldr	r4, [r6, #0]
 80070d0:	4626      	mov	r6, r4
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	d140      	bne.n	8007158 <_malloc_r+0xcc>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	4631      	mov	r1, r6
 80070da:	4638      	mov	r0, r7
 80070dc:	eb04 0803 	add.w	r8, r4, r3
 80070e0:	f000 fb36 	bl	8007750 <_sbrk_r>
 80070e4:	4580      	cmp	r8, r0
 80070e6:	d13a      	bne.n	800715e <_malloc_r+0xd2>
 80070e8:	6821      	ldr	r1, [r4, #0]
 80070ea:	3503      	adds	r5, #3
 80070ec:	1a6d      	subs	r5, r5, r1
 80070ee:	f025 0503 	bic.w	r5, r5, #3
 80070f2:	3508      	adds	r5, #8
 80070f4:	2d0c      	cmp	r5, #12
 80070f6:	bf38      	it	cc
 80070f8:	250c      	movcc	r5, #12
 80070fa:	4629      	mov	r1, r5
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7ff ffa5 	bl	800704c <sbrk_aligned>
 8007102:	3001      	adds	r0, #1
 8007104:	d02b      	beq.n	800715e <_malloc_r+0xd2>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	442b      	add	r3, r5
 800710a:	6023      	str	r3, [r4, #0]
 800710c:	e00e      	b.n	800712c <_malloc_r+0xa0>
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	1b52      	subs	r2, r2, r5
 8007112:	d41e      	bmi.n	8007152 <_malloc_r+0xc6>
 8007114:	2a0b      	cmp	r2, #11
 8007116:	d916      	bls.n	8007146 <_malloc_r+0xba>
 8007118:	1961      	adds	r1, r4, r5
 800711a:	42a3      	cmp	r3, r4
 800711c:	6025      	str	r5, [r4, #0]
 800711e:	bf18      	it	ne
 8007120:	6059      	strne	r1, [r3, #4]
 8007122:	6863      	ldr	r3, [r4, #4]
 8007124:	bf08      	it	eq
 8007126:	6031      	streq	r1, [r6, #0]
 8007128:	5162      	str	r2, [r4, r5]
 800712a:	604b      	str	r3, [r1, #4]
 800712c:	4638      	mov	r0, r7
 800712e:	f104 060b 	add.w	r6, r4, #11
 8007132:	f000 fbbd 	bl	80078b0 <__malloc_unlock>
 8007136:	f026 0607 	bic.w	r6, r6, #7
 800713a:	1d23      	adds	r3, r4, #4
 800713c:	1af2      	subs	r2, r6, r3
 800713e:	d0b6      	beq.n	80070ae <_malloc_r+0x22>
 8007140:	1b9b      	subs	r3, r3, r6
 8007142:	50a3      	str	r3, [r4, r2]
 8007144:	e7b3      	b.n	80070ae <_malloc_r+0x22>
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	42a3      	cmp	r3, r4
 800714a:	bf0c      	ite	eq
 800714c:	6032      	streq	r2, [r6, #0]
 800714e:	605a      	strne	r2, [r3, #4]
 8007150:	e7ec      	b.n	800712c <_malloc_r+0xa0>
 8007152:	4623      	mov	r3, r4
 8007154:	6864      	ldr	r4, [r4, #4]
 8007156:	e7b2      	b.n	80070be <_malloc_r+0x32>
 8007158:	4634      	mov	r4, r6
 800715a:	6876      	ldr	r6, [r6, #4]
 800715c:	e7b9      	b.n	80070d2 <_malloc_r+0x46>
 800715e:	230c      	movs	r3, #12
 8007160:	603b      	str	r3, [r7, #0]
 8007162:	4638      	mov	r0, r7
 8007164:	f000 fba4 	bl	80078b0 <__malloc_unlock>
 8007168:	e7a1      	b.n	80070ae <_malloc_r+0x22>
 800716a:	6025      	str	r5, [r4, #0]
 800716c:	e7de      	b.n	800712c <_malloc_r+0xa0>
 800716e:	bf00      	nop
 8007170:	20000708 	.word	0x20000708

08007174 <__sfputc_r>:
 8007174:	6893      	ldr	r3, [r2, #8]
 8007176:	3b01      	subs	r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	b410      	push	{r4}
 800717c:	6093      	str	r3, [r2, #8]
 800717e:	da08      	bge.n	8007192 <__sfputc_r+0x1e>
 8007180:	6994      	ldr	r4, [r2, #24]
 8007182:	42a3      	cmp	r3, r4
 8007184:	db01      	blt.n	800718a <__sfputc_r+0x16>
 8007186:	290a      	cmp	r1, #10
 8007188:	d103      	bne.n	8007192 <__sfputc_r+0x1e>
 800718a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800718e:	f7ff bc31 	b.w	80069f4 <__swbuf_r>
 8007192:	6813      	ldr	r3, [r2, #0]
 8007194:	1c58      	adds	r0, r3, #1
 8007196:	6010      	str	r0, [r2, #0]
 8007198:	7019      	strb	r1, [r3, #0]
 800719a:	4608      	mov	r0, r1
 800719c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <__sfputs_r>:
 80071a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a4:	4606      	mov	r6, r0
 80071a6:	460f      	mov	r7, r1
 80071a8:	4614      	mov	r4, r2
 80071aa:	18d5      	adds	r5, r2, r3
 80071ac:	42ac      	cmp	r4, r5
 80071ae:	d101      	bne.n	80071b4 <__sfputs_r+0x12>
 80071b0:	2000      	movs	r0, #0
 80071b2:	e007      	b.n	80071c4 <__sfputs_r+0x22>
 80071b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b8:	463a      	mov	r2, r7
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ffda 	bl	8007174 <__sfputc_r>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d1f3      	bne.n	80071ac <__sfputs_r+0xa>
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071c8 <_vfiprintf_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	460d      	mov	r5, r1
 80071ce:	b09d      	sub	sp, #116	; 0x74
 80071d0:	4614      	mov	r4, r2
 80071d2:	4698      	mov	r8, r3
 80071d4:	4606      	mov	r6, r0
 80071d6:	b118      	cbz	r0, 80071e0 <_vfiprintf_r+0x18>
 80071d8:	6983      	ldr	r3, [r0, #24]
 80071da:	b90b      	cbnz	r3, 80071e0 <_vfiprintf_r+0x18>
 80071dc:	f7ff fde4 	bl	8006da8 <__sinit>
 80071e0:	4b89      	ldr	r3, [pc, #548]	; (8007408 <_vfiprintf_r+0x240>)
 80071e2:	429d      	cmp	r5, r3
 80071e4:	d11b      	bne.n	800721e <_vfiprintf_r+0x56>
 80071e6:	6875      	ldr	r5, [r6, #4]
 80071e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ea:	07d9      	lsls	r1, r3, #31
 80071ec:	d405      	bmi.n	80071fa <_vfiprintf_r+0x32>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	059a      	lsls	r2, r3, #22
 80071f2:	d402      	bmi.n	80071fa <_vfiprintf_r+0x32>
 80071f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071f6:	f7ff fe75 	bl	8006ee4 <__retarget_lock_acquire_recursive>
 80071fa:	89ab      	ldrh	r3, [r5, #12]
 80071fc:	071b      	lsls	r3, r3, #28
 80071fe:	d501      	bpl.n	8007204 <_vfiprintf_r+0x3c>
 8007200:	692b      	ldr	r3, [r5, #16]
 8007202:	b9eb      	cbnz	r3, 8007240 <_vfiprintf_r+0x78>
 8007204:	4629      	mov	r1, r5
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff fc46 	bl	8006a98 <__swsetup_r>
 800720c:	b1c0      	cbz	r0, 8007240 <_vfiprintf_r+0x78>
 800720e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007210:	07dc      	lsls	r4, r3, #31
 8007212:	d50e      	bpl.n	8007232 <_vfiprintf_r+0x6a>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	b01d      	add	sp, #116	; 0x74
 800721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721e:	4b7b      	ldr	r3, [pc, #492]	; (800740c <_vfiprintf_r+0x244>)
 8007220:	429d      	cmp	r5, r3
 8007222:	d101      	bne.n	8007228 <_vfiprintf_r+0x60>
 8007224:	68b5      	ldr	r5, [r6, #8]
 8007226:	e7df      	b.n	80071e8 <_vfiprintf_r+0x20>
 8007228:	4b79      	ldr	r3, [pc, #484]	; (8007410 <_vfiprintf_r+0x248>)
 800722a:	429d      	cmp	r5, r3
 800722c:	bf08      	it	eq
 800722e:	68f5      	ldreq	r5, [r6, #12]
 8007230:	e7da      	b.n	80071e8 <_vfiprintf_r+0x20>
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	0598      	lsls	r0, r3, #22
 8007236:	d4ed      	bmi.n	8007214 <_vfiprintf_r+0x4c>
 8007238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800723a:	f7ff fe54 	bl	8006ee6 <__retarget_lock_release_recursive>
 800723e:	e7e9      	b.n	8007214 <_vfiprintf_r+0x4c>
 8007240:	2300      	movs	r3, #0
 8007242:	9309      	str	r3, [sp, #36]	; 0x24
 8007244:	2320      	movs	r3, #32
 8007246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800724a:	f8cd 800c 	str.w	r8, [sp, #12]
 800724e:	2330      	movs	r3, #48	; 0x30
 8007250:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007414 <_vfiprintf_r+0x24c>
 8007254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007258:	f04f 0901 	mov.w	r9, #1
 800725c:	4623      	mov	r3, r4
 800725e:	469a      	mov	sl, r3
 8007260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007264:	b10a      	cbz	r2, 800726a <_vfiprintf_r+0xa2>
 8007266:	2a25      	cmp	r2, #37	; 0x25
 8007268:	d1f9      	bne.n	800725e <_vfiprintf_r+0x96>
 800726a:	ebba 0b04 	subs.w	fp, sl, r4
 800726e:	d00b      	beq.n	8007288 <_vfiprintf_r+0xc0>
 8007270:	465b      	mov	r3, fp
 8007272:	4622      	mov	r2, r4
 8007274:	4629      	mov	r1, r5
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff ff93 	bl	80071a2 <__sfputs_r>
 800727c:	3001      	adds	r0, #1
 800727e:	f000 80aa 	beq.w	80073d6 <_vfiprintf_r+0x20e>
 8007282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007284:	445a      	add	r2, fp
 8007286:	9209      	str	r2, [sp, #36]	; 0x24
 8007288:	f89a 3000 	ldrb.w	r3, [sl]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80a2 	beq.w	80073d6 <_vfiprintf_r+0x20e>
 8007292:	2300      	movs	r3, #0
 8007294:	f04f 32ff 	mov.w	r2, #4294967295
 8007298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800729c:	f10a 0a01 	add.w	sl, sl, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	9307      	str	r3, [sp, #28]
 80072a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072a8:	931a      	str	r3, [sp, #104]	; 0x68
 80072aa:	4654      	mov	r4, sl
 80072ac:	2205      	movs	r2, #5
 80072ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b2:	4858      	ldr	r0, [pc, #352]	; (8007414 <_vfiprintf_r+0x24c>)
 80072b4:	f7f8 ff9c 	bl	80001f0 <memchr>
 80072b8:	9a04      	ldr	r2, [sp, #16]
 80072ba:	b9d8      	cbnz	r0, 80072f4 <_vfiprintf_r+0x12c>
 80072bc:	06d1      	lsls	r1, r2, #27
 80072be:	bf44      	itt	mi
 80072c0:	2320      	movmi	r3, #32
 80072c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c6:	0713      	lsls	r3, r2, #28
 80072c8:	bf44      	itt	mi
 80072ca:	232b      	movmi	r3, #43	; 0x2b
 80072cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d0:	f89a 3000 	ldrb.w	r3, [sl]
 80072d4:	2b2a      	cmp	r3, #42	; 0x2a
 80072d6:	d015      	beq.n	8007304 <_vfiprintf_r+0x13c>
 80072d8:	9a07      	ldr	r2, [sp, #28]
 80072da:	4654      	mov	r4, sl
 80072dc:	2000      	movs	r0, #0
 80072de:	f04f 0c0a 	mov.w	ip, #10
 80072e2:	4621      	mov	r1, r4
 80072e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e8:	3b30      	subs	r3, #48	; 0x30
 80072ea:	2b09      	cmp	r3, #9
 80072ec:	d94e      	bls.n	800738c <_vfiprintf_r+0x1c4>
 80072ee:	b1b0      	cbz	r0, 800731e <_vfiprintf_r+0x156>
 80072f0:	9207      	str	r2, [sp, #28]
 80072f2:	e014      	b.n	800731e <_vfiprintf_r+0x156>
 80072f4:	eba0 0308 	sub.w	r3, r0, r8
 80072f8:	fa09 f303 	lsl.w	r3, r9, r3
 80072fc:	4313      	orrs	r3, r2
 80072fe:	9304      	str	r3, [sp, #16]
 8007300:	46a2      	mov	sl, r4
 8007302:	e7d2      	b.n	80072aa <_vfiprintf_r+0xe2>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	1d19      	adds	r1, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	9103      	str	r1, [sp, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	bfbb      	ittet	lt
 8007310:	425b      	neglt	r3, r3
 8007312:	f042 0202 	orrlt.w	r2, r2, #2
 8007316:	9307      	strge	r3, [sp, #28]
 8007318:	9307      	strlt	r3, [sp, #28]
 800731a:	bfb8      	it	lt
 800731c:	9204      	strlt	r2, [sp, #16]
 800731e:	7823      	ldrb	r3, [r4, #0]
 8007320:	2b2e      	cmp	r3, #46	; 0x2e
 8007322:	d10c      	bne.n	800733e <_vfiprintf_r+0x176>
 8007324:	7863      	ldrb	r3, [r4, #1]
 8007326:	2b2a      	cmp	r3, #42	; 0x2a
 8007328:	d135      	bne.n	8007396 <_vfiprintf_r+0x1ce>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	1d1a      	adds	r2, r3, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	9203      	str	r2, [sp, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	bfb8      	it	lt
 8007336:	f04f 33ff 	movlt.w	r3, #4294967295
 800733a:	3402      	adds	r4, #2
 800733c:	9305      	str	r3, [sp, #20]
 800733e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007424 <_vfiprintf_r+0x25c>
 8007342:	7821      	ldrb	r1, [r4, #0]
 8007344:	2203      	movs	r2, #3
 8007346:	4650      	mov	r0, sl
 8007348:	f7f8 ff52 	bl	80001f0 <memchr>
 800734c:	b140      	cbz	r0, 8007360 <_vfiprintf_r+0x198>
 800734e:	2340      	movs	r3, #64	; 0x40
 8007350:	eba0 000a 	sub.w	r0, r0, sl
 8007354:	fa03 f000 	lsl.w	r0, r3, r0
 8007358:	9b04      	ldr	r3, [sp, #16]
 800735a:	4303      	orrs	r3, r0
 800735c:	3401      	adds	r4, #1
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007364:	482c      	ldr	r0, [pc, #176]	; (8007418 <_vfiprintf_r+0x250>)
 8007366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800736a:	2206      	movs	r2, #6
 800736c:	f7f8 ff40 	bl	80001f0 <memchr>
 8007370:	2800      	cmp	r0, #0
 8007372:	d03f      	beq.n	80073f4 <_vfiprintf_r+0x22c>
 8007374:	4b29      	ldr	r3, [pc, #164]	; (800741c <_vfiprintf_r+0x254>)
 8007376:	bb1b      	cbnz	r3, 80073c0 <_vfiprintf_r+0x1f8>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	3307      	adds	r3, #7
 800737c:	f023 0307 	bic.w	r3, r3, #7
 8007380:	3308      	adds	r3, #8
 8007382:	9303      	str	r3, [sp, #12]
 8007384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007386:	443b      	add	r3, r7
 8007388:	9309      	str	r3, [sp, #36]	; 0x24
 800738a:	e767      	b.n	800725c <_vfiprintf_r+0x94>
 800738c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007390:	460c      	mov	r4, r1
 8007392:	2001      	movs	r0, #1
 8007394:	e7a5      	b.n	80072e2 <_vfiprintf_r+0x11a>
 8007396:	2300      	movs	r3, #0
 8007398:	3401      	adds	r4, #1
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	4619      	mov	r1, r3
 800739e:	f04f 0c0a 	mov.w	ip, #10
 80073a2:	4620      	mov	r0, r4
 80073a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a8:	3a30      	subs	r2, #48	; 0x30
 80073aa:	2a09      	cmp	r2, #9
 80073ac:	d903      	bls.n	80073b6 <_vfiprintf_r+0x1ee>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0c5      	beq.n	800733e <_vfiprintf_r+0x176>
 80073b2:	9105      	str	r1, [sp, #20]
 80073b4:	e7c3      	b.n	800733e <_vfiprintf_r+0x176>
 80073b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ba:	4604      	mov	r4, r0
 80073bc:	2301      	movs	r3, #1
 80073be:	e7f0      	b.n	80073a2 <_vfiprintf_r+0x1da>
 80073c0:	ab03      	add	r3, sp, #12
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	462a      	mov	r2, r5
 80073c6:	4b16      	ldr	r3, [pc, #88]	; (8007420 <_vfiprintf_r+0x258>)
 80073c8:	a904      	add	r1, sp, #16
 80073ca:	4630      	mov	r0, r6
 80073cc:	f3af 8000 	nop.w
 80073d0:	4607      	mov	r7, r0
 80073d2:	1c78      	adds	r0, r7, #1
 80073d4:	d1d6      	bne.n	8007384 <_vfiprintf_r+0x1bc>
 80073d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d8:	07d9      	lsls	r1, r3, #31
 80073da:	d405      	bmi.n	80073e8 <_vfiprintf_r+0x220>
 80073dc:	89ab      	ldrh	r3, [r5, #12]
 80073de:	059a      	lsls	r2, r3, #22
 80073e0:	d402      	bmi.n	80073e8 <_vfiprintf_r+0x220>
 80073e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073e4:	f7ff fd7f 	bl	8006ee6 <__retarget_lock_release_recursive>
 80073e8:	89ab      	ldrh	r3, [r5, #12]
 80073ea:	065b      	lsls	r3, r3, #25
 80073ec:	f53f af12 	bmi.w	8007214 <_vfiprintf_r+0x4c>
 80073f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f2:	e711      	b.n	8007218 <_vfiprintf_r+0x50>
 80073f4:	ab03      	add	r3, sp, #12
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	462a      	mov	r2, r5
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <_vfiprintf_r+0x258>)
 80073fc:	a904      	add	r1, sp, #16
 80073fe:	4630      	mov	r0, r6
 8007400:	f000 f880 	bl	8007504 <_printf_i>
 8007404:	e7e4      	b.n	80073d0 <_vfiprintf_r+0x208>
 8007406:	bf00      	nop
 8007408:	08007f38 	.word	0x08007f38
 800740c:	08007f58 	.word	0x08007f58
 8007410:	08007f18 	.word	0x08007f18
 8007414:	08007f78 	.word	0x08007f78
 8007418:	08007f82 	.word	0x08007f82
 800741c:	00000000 	.word	0x00000000
 8007420:	080071a3 	.word	0x080071a3
 8007424:	08007f7e 	.word	0x08007f7e

08007428 <_printf_common>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	4616      	mov	r6, r2
 800742e:	4699      	mov	r9, r3
 8007430:	688a      	ldr	r2, [r1, #8]
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007438:	4293      	cmp	r3, r2
 800743a:	bfb8      	it	lt
 800743c:	4613      	movlt	r3, r2
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007444:	4607      	mov	r7, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b10a      	cbz	r2, 800744e <_printf_common+0x26>
 800744a:	3301      	adds	r3, #1
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	0699      	lsls	r1, r3, #26
 8007452:	bf42      	ittt	mi
 8007454:	6833      	ldrmi	r3, [r6, #0]
 8007456:	3302      	addmi	r3, #2
 8007458:	6033      	strmi	r3, [r6, #0]
 800745a:	6825      	ldr	r5, [r4, #0]
 800745c:	f015 0506 	ands.w	r5, r5, #6
 8007460:	d106      	bne.n	8007470 <_printf_common+0x48>
 8007462:	f104 0a19 	add.w	sl, r4, #25
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	6832      	ldr	r2, [r6, #0]
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	42ab      	cmp	r3, r5
 800746e:	dc26      	bgt.n	80074be <_printf_common+0x96>
 8007470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007474:	1e13      	subs	r3, r2, #0
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	bf18      	it	ne
 800747a:	2301      	movne	r3, #1
 800747c:	0692      	lsls	r2, r2, #26
 800747e:	d42b      	bmi.n	80074d8 <_printf_common+0xb0>
 8007480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007484:	4649      	mov	r1, r9
 8007486:	4638      	mov	r0, r7
 8007488:	47c0      	blx	r8
 800748a:	3001      	adds	r0, #1
 800748c:	d01e      	beq.n	80074cc <_printf_common+0xa4>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	68e5      	ldr	r5, [r4, #12]
 8007492:	6832      	ldr	r2, [r6, #0]
 8007494:	f003 0306 	and.w	r3, r3, #6
 8007498:	2b04      	cmp	r3, #4
 800749a:	bf08      	it	eq
 800749c:	1aad      	subeq	r5, r5, r2
 800749e:	68a3      	ldr	r3, [r4, #8]
 80074a0:	6922      	ldr	r2, [r4, #16]
 80074a2:	bf0c      	ite	eq
 80074a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a8:	2500      	movne	r5, #0
 80074aa:	4293      	cmp	r3, r2
 80074ac:	bfc4      	itt	gt
 80074ae:	1a9b      	subgt	r3, r3, r2
 80074b0:	18ed      	addgt	r5, r5, r3
 80074b2:	2600      	movs	r6, #0
 80074b4:	341a      	adds	r4, #26
 80074b6:	42b5      	cmp	r5, r6
 80074b8:	d11a      	bne.n	80074f0 <_printf_common+0xc8>
 80074ba:	2000      	movs	r0, #0
 80074bc:	e008      	b.n	80074d0 <_printf_common+0xa8>
 80074be:	2301      	movs	r3, #1
 80074c0:	4652      	mov	r2, sl
 80074c2:	4649      	mov	r1, r9
 80074c4:	4638      	mov	r0, r7
 80074c6:	47c0      	blx	r8
 80074c8:	3001      	adds	r0, #1
 80074ca:	d103      	bne.n	80074d4 <_printf_common+0xac>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d4:	3501      	adds	r5, #1
 80074d6:	e7c6      	b.n	8007466 <_printf_common+0x3e>
 80074d8:	18e1      	adds	r1, r4, r3
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	2030      	movs	r0, #48	; 0x30
 80074de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074e2:	4422      	add	r2, r4
 80074e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074ec:	3302      	adds	r3, #2
 80074ee:	e7c7      	b.n	8007480 <_printf_common+0x58>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4622      	mov	r2, r4
 80074f4:	4649      	mov	r1, r9
 80074f6:	4638      	mov	r0, r7
 80074f8:	47c0      	blx	r8
 80074fa:	3001      	adds	r0, #1
 80074fc:	d0e6      	beq.n	80074cc <_printf_common+0xa4>
 80074fe:	3601      	adds	r6, #1
 8007500:	e7d9      	b.n	80074b6 <_printf_common+0x8e>
	...

08007504 <_printf_i>:
 8007504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	7e0f      	ldrb	r7, [r1, #24]
 800750a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800750c:	2f78      	cmp	r7, #120	; 0x78
 800750e:	4691      	mov	r9, r2
 8007510:	4680      	mov	r8, r0
 8007512:	460c      	mov	r4, r1
 8007514:	469a      	mov	sl, r3
 8007516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800751a:	d807      	bhi.n	800752c <_printf_i+0x28>
 800751c:	2f62      	cmp	r7, #98	; 0x62
 800751e:	d80a      	bhi.n	8007536 <_printf_i+0x32>
 8007520:	2f00      	cmp	r7, #0
 8007522:	f000 80d8 	beq.w	80076d6 <_printf_i+0x1d2>
 8007526:	2f58      	cmp	r7, #88	; 0x58
 8007528:	f000 80a3 	beq.w	8007672 <_printf_i+0x16e>
 800752c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007534:	e03a      	b.n	80075ac <_printf_i+0xa8>
 8007536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800753a:	2b15      	cmp	r3, #21
 800753c:	d8f6      	bhi.n	800752c <_printf_i+0x28>
 800753e:	a101      	add	r1, pc, #4	; (adr r1, 8007544 <_printf_i+0x40>)
 8007540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007544:	0800759d 	.word	0x0800759d
 8007548:	080075b1 	.word	0x080075b1
 800754c:	0800752d 	.word	0x0800752d
 8007550:	0800752d 	.word	0x0800752d
 8007554:	0800752d 	.word	0x0800752d
 8007558:	0800752d 	.word	0x0800752d
 800755c:	080075b1 	.word	0x080075b1
 8007560:	0800752d 	.word	0x0800752d
 8007564:	0800752d 	.word	0x0800752d
 8007568:	0800752d 	.word	0x0800752d
 800756c:	0800752d 	.word	0x0800752d
 8007570:	080076bd 	.word	0x080076bd
 8007574:	080075e1 	.word	0x080075e1
 8007578:	0800769f 	.word	0x0800769f
 800757c:	0800752d 	.word	0x0800752d
 8007580:	0800752d 	.word	0x0800752d
 8007584:	080076df 	.word	0x080076df
 8007588:	0800752d 	.word	0x0800752d
 800758c:	080075e1 	.word	0x080075e1
 8007590:	0800752d 	.word	0x0800752d
 8007594:	0800752d 	.word	0x0800752d
 8007598:	080076a7 	.word	0x080076a7
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	602a      	str	r2, [r5, #0]
 80075a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0a3      	b.n	80076f8 <_printf_i+0x1f4>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	6829      	ldr	r1, [r5, #0]
 80075b4:	0606      	lsls	r6, r0, #24
 80075b6:	f101 0304 	add.w	r3, r1, #4
 80075ba:	d50a      	bpl.n	80075d2 <_printf_i+0xce>
 80075bc:	680e      	ldr	r6, [r1, #0]
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	2e00      	cmp	r6, #0
 80075c2:	da03      	bge.n	80075cc <_printf_i+0xc8>
 80075c4:	232d      	movs	r3, #45	; 0x2d
 80075c6:	4276      	negs	r6, r6
 80075c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075cc:	485e      	ldr	r0, [pc, #376]	; (8007748 <_printf_i+0x244>)
 80075ce:	230a      	movs	r3, #10
 80075d0:	e019      	b.n	8007606 <_printf_i+0x102>
 80075d2:	680e      	ldr	r6, [r1, #0]
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075da:	bf18      	it	ne
 80075dc:	b236      	sxthne	r6, r6
 80075de:	e7ef      	b.n	80075c0 <_printf_i+0xbc>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	6820      	ldr	r0, [r4, #0]
 80075e4:	1d19      	adds	r1, r3, #4
 80075e6:	6029      	str	r1, [r5, #0]
 80075e8:	0601      	lsls	r1, r0, #24
 80075ea:	d501      	bpl.n	80075f0 <_printf_i+0xec>
 80075ec:	681e      	ldr	r6, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <_printf_i+0xf2>
 80075f0:	0646      	lsls	r6, r0, #25
 80075f2:	d5fb      	bpl.n	80075ec <_printf_i+0xe8>
 80075f4:	881e      	ldrh	r6, [r3, #0]
 80075f6:	4854      	ldr	r0, [pc, #336]	; (8007748 <_printf_i+0x244>)
 80075f8:	2f6f      	cmp	r7, #111	; 0x6f
 80075fa:	bf0c      	ite	eq
 80075fc:	2308      	moveq	r3, #8
 80075fe:	230a      	movne	r3, #10
 8007600:	2100      	movs	r1, #0
 8007602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007606:	6865      	ldr	r5, [r4, #4]
 8007608:	60a5      	str	r5, [r4, #8]
 800760a:	2d00      	cmp	r5, #0
 800760c:	bfa2      	ittt	ge
 800760e:	6821      	ldrge	r1, [r4, #0]
 8007610:	f021 0104 	bicge.w	r1, r1, #4
 8007614:	6021      	strge	r1, [r4, #0]
 8007616:	b90e      	cbnz	r6, 800761c <_printf_i+0x118>
 8007618:	2d00      	cmp	r5, #0
 800761a:	d04d      	beq.n	80076b8 <_printf_i+0x1b4>
 800761c:	4615      	mov	r5, r2
 800761e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007622:	fb03 6711 	mls	r7, r3, r1, r6
 8007626:	5dc7      	ldrb	r7, [r0, r7]
 8007628:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800762c:	4637      	mov	r7, r6
 800762e:	42bb      	cmp	r3, r7
 8007630:	460e      	mov	r6, r1
 8007632:	d9f4      	bls.n	800761e <_printf_i+0x11a>
 8007634:	2b08      	cmp	r3, #8
 8007636:	d10b      	bne.n	8007650 <_printf_i+0x14c>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	07de      	lsls	r6, r3, #31
 800763c:	d508      	bpl.n	8007650 <_printf_i+0x14c>
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	6861      	ldr	r1, [r4, #4]
 8007642:	4299      	cmp	r1, r3
 8007644:	bfde      	ittt	le
 8007646:	2330      	movle	r3, #48	; 0x30
 8007648:	f805 3c01 	strble.w	r3, [r5, #-1]
 800764c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007650:	1b52      	subs	r2, r2, r5
 8007652:	6122      	str	r2, [r4, #16]
 8007654:	f8cd a000 	str.w	sl, [sp]
 8007658:	464b      	mov	r3, r9
 800765a:	aa03      	add	r2, sp, #12
 800765c:	4621      	mov	r1, r4
 800765e:	4640      	mov	r0, r8
 8007660:	f7ff fee2 	bl	8007428 <_printf_common>
 8007664:	3001      	adds	r0, #1
 8007666:	d14c      	bne.n	8007702 <_printf_i+0x1fe>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	b004      	add	sp, #16
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007672:	4835      	ldr	r0, [pc, #212]	; (8007748 <_printf_i+0x244>)
 8007674:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007678:	6829      	ldr	r1, [r5, #0]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007680:	6029      	str	r1, [r5, #0]
 8007682:	061d      	lsls	r5, r3, #24
 8007684:	d514      	bpl.n	80076b0 <_printf_i+0x1ac>
 8007686:	07df      	lsls	r7, r3, #31
 8007688:	bf44      	itt	mi
 800768a:	f043 0320 	orrmi.w	r3, r3, #32
 800768e:	6023      	strmi	r3, [r4, #0]
 8007690:	b91e      	cbnz	r6, 800769a <_printf_i+0x196>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	f023 0320 	bic.w	r3, r3, #32
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	2310      	movs	r3, #16
 800769c:	e7b0      	b.n	8007600 <_printf_i+0xfc>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	f043 0320 	orr.w	r3, r3, #32
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	2378      	movs	r3, #120	; 0x78
 80076a8:	4828      	ldr	r0, [pc, #160]	; (800774c <_printf_i+0x248>)
 80076aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076ae:	e7e3      	b.n	8007678 <_printf_i+0x174>
 80076b0:	0659      	lsls	r1, r3, #25
 80076b2:	bf48      	it	mi
 80076b4:	b2b6      	uxthmi	r6, r6
 80076b6:	e7e6      	b.n	8007686 <_printf_i+0x182>
 80076b8:	4615      	mov	r5, r2
 80076ba:	e7bb      	b.n	8007634 <_printf_i+0x130>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	6826      	ldr	r6, [r4, #0]
 80076c0:	6961      	ldr	r1, [r4, #20]
 80076c2:	1d18      	adds	r0, r3, #4
 80076c4:	6028      	str	r0, [r5, #0]
 80076c6:	0635      	lsls	r5, r6, #24
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	d501      	bpl.n	80076d0 <_printf_i+0x1cc>
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	e002      	b.n	80076d6 <_printf_i+0x1d2>
 80076d0:	0670      	lsls	r0, r6, #25
 80076d2:	d5fb      	bpl.n	80076cc <_printf_i+0x1c8>
 80076d4:	8019      	strh	r1, [r3, #0]
 80076d6:	2300      	movs	r3, #0
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	4615      	mov	r5, r2
 80076dc:	e7ba      	b.n	8007654 <_printf_i+0x150>
 80076de:	682b      	ldr	r3, [r5, #0]
 80076e0:	1d1a      	adds	r2, r3, #4
 80076e2:	602a      	str	r2, [r5, #0]
 80076e4:	681d      	ldr	r5, [r3, #0]
 80076e6:	6862      	ldr	r2, [r4, #4]
 80076e8:	2100      	movs	r1, #0
 80076ea:	4628      	mov	r0, r5
 80076ec:	f7f8 fd80 	bl	80001f0 <memchr>
 80076f0:	b108      	cbz	r0, 80076f6 <_printf_i+0x1f2>
 80076f2:	1b40      	subs	r0, r0, r5
 80076f4:	6060      	str	r0, [r4, #4]
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	2300      	movs	r3, #0
 80076fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007700:	e7a8      	b.n	8007654 <_printf_i+0x150>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	462a      	mov	r2, r5
 8007706:	4649      	mov	r1, r9
 8007708:	4640      	mov	r0, r8
 800770a:	47d0      	blx	sl
 800770c:	3001      	adds	r0, #1
 800770e:	d0ab      	beq.n	8007668 <_printf_i+0x164>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	079b      	lsls	r3, r3, #30
 8007714:	d413      	bmi.n	800773e <_printf_i+0x23a>
 8007716:	68e0      	ldr	r0, [r4, #12]
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	4298      	cmp	r0, r3
 800771c:	bfb8      	it	lt
 800771e:	4618      	movlt	r0, r3
 8007720:	e7a4      	b.n	800766c <_printf_i+0x168>
 8007722:	2301      	movs	r3, #1
 8007724:	4632      	mov	r2, r6
 8007726:	4649      	mov	r1, r9
 8007728:	4640      	mov	r0, r8
 800772a:	47d0      	blx	sl
 800772c:	3001      	adds	r0, #1
 800772e:	d09b      	beq.n	8007668 <_printf_i+0x164>
 8007730:	3501      	adds	r5, #1
 8007732:	68e3      	ldr	r3, [r4, #12]
 8007734:	9903      	ldr	r1, [sp, #12]
 8007736:	1a5b      	subs	r3, r3, r1
 8007738:	42ab      	cmp	r3, r5
 800773a:	dcf2      	bgt.n	8007722 <_printf_i+0x21e>
 800773c:	e7eb      	b.n	8007716 <_printf_i+0x212>
 800773e:	2500      	movs	r5, #0
 8007740:	f104 0619 	add.w	r6, r4, #25
 8007744:	e7f5      	b.n	8007732 <_printf_i+0x22e>
 8007746:	bf00      	nop
 8007748:	08007f89 	.word	0x08007f89
 800774c:	08007f9a 	.word	0x08007f9a

08007750 <_sbrk_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d06      	ldr	r5, [pc, #24]	; (800776c <_sbrk_r+0x1c>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7fa fc4a 	bl	8001ff4 <_sbrk>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_sbrk_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_sbrk_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20000710 	.word	0x20000710

08007770 <__sread>:
 8007770:	b510      	push	{r4, lr}
 8007772:	460c      	mov	r4, r1
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	f000 f8a0 	bl	80078bc <_read_r>
 800777c:	2800      	cmp	r0, #0
 800777e:	bfab      	itete	ge
 8007780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007782:	89a3      	ldrhlt	r3, [r4, #12]
 8007784:	181b      	addge	r3, r3, r0
 8007786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800778a:	bfac      	ite	ge
 800778c:	6563      	strge	r3, [r4, #84]	; 0x54
 800778e:	81a3      	strhlt	r3, [r4, #12]
 8007790:	bd10      	pop	{r4, pc}

08007792 <__swrite>:
 8007792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	461f      	mov	r7, r3
 8007798:	898b      	ldrh	r3, [r1, #12]
 800779a:	05db      	lsls	r3, r3, #23
 800779c:	4605      	mov	r5, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	4616      	mov	r6, r2
 80077a2:	d505      	bpl.n	80077b0 <__swrite+0x1e>
 80077a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a8:	2302      	movs	r3, #2
 80077aa:	2200      	movs	r2, #0
 80077ac:	f000 f868 	bl	8007880 <_lseek_r>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	4632      	mov	r2, r6
 80077be:	463b      	mov	r3, r7
 80077c0:	4628      	mov	r0, r5
 80077c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c6:	f000 b817 	b.w	80077f8 <_write_r>

080077ca <__sseek>:
 80077ca:	b510      	push	{r4, lr}
 80077cc:	460c      	mov	r4, r1
 80077ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d2:	f000 f855 	bl	8007880 <_lseek_r>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	bf15      	itete	ne
 80077dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80077de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077e6:	81a3      	strheq	r3, [r4, #12]
 80077e8:	bf18      	it	ne
 80077ea:	81a3      	strhne	r3, [r4, #12]
 80077ec:	bd10      	pop	{r4, pc}

080077ee <__sclose>:
 80077ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f2:	f000 b813 	b.w	800781c <_close_r>
	...

080077f8 <_write_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d07      	ldr	r5, [pc, #28]	; (8007818 <_write_r+0x20>)
 80077fc:	4604      	mov	r4, r0
 80077fe:	4608      	mov	r0, r1
 8007800:	4611      	mov	r1, r2
 8007802:	2200      	movs	r2, #0
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f7fa fba4 	bl	8001f54 <_write>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_write_r+0x1e>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_write_r+0x1e>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20000710 	.word	0x20000710

0800781c <_close_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d06      	ldr	r5, [pc, #24]	; (8007838 <_close_r+0x1c>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f7fa fbb0 	bl	8001f8c <_close>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_close_r+0x1a>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_close_r+0x1a>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	20000710 	.word	0x20000710

0800783c <_fstat_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4d07      	ldr	r5, [pc, #28]	; (800785c <_fstat_r+0x20>)
 8007840:	2300      	movs	r3, #0
 8007842:	4604      	mov	r4, r0
 8007844:	4608      	mov	r0, r1
 8007846:	4611      	mov	r1, r2
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	f7fa fbab 	bl	8001fa4 <_fstat>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d102      	bne.n	8007858 <_fstat_r+0x1c>
 8007852:	682b      	ldr	r3, [r5, #0]
 8007854:	b103      	cbz	r3, 8007858 <_fstat_r+0x1c>
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	bd38      	pop	{r3, r4, r5, pc}
 800785a:	bf00      	nop
 800785c:	20000710 	.word	0x20000710

08007860 <_isatty_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d06      	ldr	r5, [pc, #24]	; (800787c <_isatty_r+0x1c>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	f7fa fbaa 	bl	8001fc4 <_isatty>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_isatty_r+0x1a>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_isatty_r+0x1a>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20000710 	.word	0x20000710

08007880 <_lseek_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d07      	ldr	r5, [pc, #28]	; (80078a0 <_lseek_r+0x20>)
 8007884:	4604      	mov	r4, r0
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	2200      	movs	r2, #0
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f7fa fba3 	bl	8001fda <_lseek>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_lseek_r+0x1e>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_lseek_r+0x1e>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000710 	.word	0x20000710

080078a4 <__malloc_lock>:
 80078a4:	4801      	ldr	r0, [pc, #4]	; (80078ac <__malloc_lock+0x8>)
 80078a6:	f7ff bb1d 	b.w	8006ee4 <__retarget_lock_acquire_recursive>
 80078aa:	bf00      	nop
 80078ac:	20000704 	.word	0x20000704

080078b0 <__malloc_unlock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	; (80078b8 <__malloc_unlock+0x8>)
 80078b2:	f7ff bb18 	b.w	8006ee6 <__retarget_lock_release_recursive>
 80078b6:	bf00      	nop
 80078b8:	20000704 	.word	0x20000704

080078bc <_read_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d07      	ldr	r5, [pc, #28]	; (80078dc <_read_r+0x20>)
 80078c0:	4604      	mov	r4, r0
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7fa fb25 	bl	8001f1a <_read>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_read_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_read_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	20000710 	.word	0x20000710

080078e0 <log>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	ed2d 8b02 	vpush	{d8}
 80078e6:	ec55 4b10 	vmov	r4, r5, d0
 80078ea:	f000 f839 	bl	8007960 <__ieee754_log>
 80078ee:	4622      	mov	r2, r4
 80078f0:	462b      	mov	r3, r5
 80078f2:	4620      	mov	r0, r4
 80078f4:	4629      	mov	r1, r5
 80078f6:	eeb0 8a40 	vmov.f32	s16, s0
 80078fa:	eef0 8a60 	vmov.f32	s17, s1
 80078fe:	f7f9 f91d 	bl	8000b3c <__aeabi_dcmpun>
 8007902:	b998      	cbnz	r0, 800792c <log+0x4c>
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	f7f9 f90c 	bl	8000b28 <__aeabi_dcmpgt>
 8007910:	b960      	cbnz	r0, 800792c <log+0x4c>
 8007912:	2200      	movs	r2, #0
 8007914:	2300      	movs	r3, #0
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	f7f9 f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800791e:	b160      	cbz	r0, 800793a <log+0x5a>
 8007920:	f7fe ffa8 	bl	8006874 <__errno>
 8007924:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007950 <log+0x70>
 8007928:	2322      	movs	r3, #34	; 0x22
 800792a:	6003      	str	r3, [r0, #0]
 800792c:	eeb0 0a48 	vmov.f32	s0, s16
 8007930:	eef0 0a68 	vmov.f32	s1, s17
 8007934:	ecbd 8b02 	vpop	{d8}
 8007938:	bd38      	pop	{r3, r4, r5, pc}
 800793a:	f7fe ff9b 	bl	8006874 <__errno>
 800793e:	ecbd 8b02 	vpop	{d8}
 8007942:	2321      	movs	r3, #33	; 0x21
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800794a:	4803      	ldr	r0, [pc, #12]	; (8007958 <log+0x78>)
 800794c:	f000 b9c4 	b.w	8007cd8 <nan>
 8007950:	00000000 	.word	0x00000000
 8007954:	fff00000 	.word	0xfff00000
 8007958:	08007f7d 	.word	0x08007f7d
 800795c:	00000000 	.word	0x00000000

08007960 <__ieee754_log>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	ec51 0b10 	vmov	r0, r1, d0
 8007968:	ed2d 8b04 	vpush	{d8-d9}
 800796c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007970:	b083      	sub	sp, #12
 8007972:	460d      	mov	r5, r1
 8007974:	da29      	bge.n	80079ca <__ieee754_log+0x6a>
 8007976:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800797a:	4303      	orrs	r3, r0
 800797c:	ee10 2a10 	vmov	r2, s0
 8007980:	d10c      	bne.n	800799c <__ieee754_log+0x3c>
 8007982:	49cf      	ldr	r1, [pc, #828]	; (8007cc0 <__ieee754_log+0x360>)
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	2000      	movs	r0, #0
 800798a:	f7f8 ff67 	bl	800085c <__aeabi_ddiv>
 800798e:	ec41 0b10 	vmov	d0, r0, r1
 8007992:	b003      	add	sp, #12
 8007994:	ecbd 8b04 	vpop	{d8-d9}
 8007998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799c:	2900      	cmp	r1, #0
 800799e:	da05      	bge.n	80079ac <__ieee754_log+0x4c>
 80079a0:	460b      	mov	r3, r1
 80079a2:	f7f8 fc79 	bl	8000298 <__aeabi_dsub>
 80079a6:	2200      	movs	r2, #0
 80079a8:	2300      	movs	r3, #0
 80079aa:	e7ee      	b.n	800798a <__ieee754_log+0x2a>
 80079ac:	4bc5      	ldr	r3, [pc, #788]	; (8007cc4 <__ieee754_log+0x364>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	f7f8 fe2a 	bl	8000608 <__aeabi_dmul>
 80079b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80079b8:	460d      	mov	r5, r1
 80079ba:	4ac3      	ldr	r2, [pc, #780]	; (8007cc8 <__ieee754_log+0x368>)
 80079bc:	4295      	cmp	r5, r2
 80079be:	dd06      	ble.n	80079ce <__ieee754_log+0x6e>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	f7f8 fc6a 	bl	800029c <__adddf3>
 80079c8:	e7e1      	b.n	800798e <__ieee754_log+0x2e>
 80079ca:	2300      	movs	r3, #0
 80079cc:	e7f5      	b.n	80079ba <__ieee754_log+0x5a>
 80079ce:	152c      	asrs	r4, r5, #20
 80079d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80079d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80079d8:	441c      	add	r4, r3
 80079da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80079de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80079e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80079ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80079ee:	ea42 0105 	orr.w	r1, r2, r5
 80079f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80079f6:	2200      	movs	r2, #0
 80079f8:	4bb4      	ldr	r3, [pc, #720]	; (8007ccc <__ieee754_log+0x36c>)
 80079fa:	f7f8 fc4d 	bl	8000298 <__aeabi_dsub>
 80079fe:	1cab      	adds	r3, r5, #2
 8007a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	4682      	mov	sl, r0
 8007a08:	468b      	mov	fp, r1
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	dc53      	bgt.n	8007ab8 <__ieee754_log+0x158>
 8007a10:	2300      	movs	r3, #0
 8007a12:	f7f9 f861 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a16:	b1d0      	cbz	r0, 8007a4e <__ieee754_log+0xee>
 8007a18:	2c00      	cmp	r4, #0
 8007a1a:	f000 8122 	beq.w	8007c62 <__ieee754_log+0x302>
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7f8 fd88 	bl	8000534 <__aeabi_i2d>
 8007a24:	a390      	add	r3, pc, #576	; (adr r3, 8007c68 <__ieee754_log+0x308>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460f      	mov	r7, r1
 8007a2e:	f7f8 fdeb 	bl	8000608 <__aeabi_dmul>
 8007a32:	a38f      	add	r3, pc, #572	; (adr r3, 8007c70 <__ieee754_log+0x310>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	4604      	mov	r4, r0
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4639      	mov	r1, r7
 8007a40:	f7f8 fde2 	bl	8000608 <__aeabi_dmul>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	e7ba      	b.n	80079c4 <__ieee754_log+0x64>
 8007a4e:	a38a      	add	r3, pc, #552	; (adr r3, 8007c78 <__ieee754_log+0x318>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	4650      	mov	r0, sl
 8007a56:	4659      	mov	r1, fp
 8007a58:	f7f8 fdd6 	bl	8000608 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	2000      	movs	r0, #0
 8007a62:	499b      	ldr	r1, [pc, #620]	; (8007cd0 <__ieee754_log+0x370>)
 8007a64:	f7f8 fc18 	bl	8000298 <__aeabi_dsub>
 8007a68:	4652      	mov	r2, sl
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	465b      	mov	r3, fp
 8007a70:	4650      	mov	r0, sl
 8007a72:	4659      	mov	r1, fp
 8007a74:	f7f8 fdc8 	bl	8000608 <__aeabi_dmul>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f8 fdc2 	bl	8000608 <__aeabi_dmul>
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	b914      	cbnz	r4, 8007a90 <__ieee754_log+0x130>
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	463b      	mov	r3, r7
 8007a8e:	e0a2      	b.n	8007bd6 <__ieee754_log+0x276>
 8007a90:	4620      	mov	r0, r4
 8007a92:	f7f8 fd4f 	bl	8000534 <__aeabi_i2d>
 8007a96:	a374      	add	r3, pc, #464	; (adr r3, 8007c68 <__ieee754_log+0x308>)
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	f7f8 fdb2 	bl	8000608 <__aeabi_dmul>
 8007aa4:	a372      	add	r3, pc, #456	; (adr r3, 8007c70 <__ieee754_log+0x310>)
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	4640      	mov	r0, r8
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	f7f8 fda9 	bl	8000608 <__aeabi_dmul>
 8007ab6:	e0a7      	b.n	8007c08 <__ieee754_log+0x2a8>
 8007ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007abc:	f7f8 fbee 	bl	800029c <__adddf3>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	f7f8 fec8 	bl	800085c <__aeabi_ddiv>
 8007acc:	ec41 0b18 	vmov	d8, r0, r1
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7f8 fd2f 	bl	8000534 <__aeabi_i2d>
 8007ad6:	ec53 2b18 	vmov	r2, r3, d8
 8007ada:	ec41 0b19 	vmov	d9, r0, r1
 8007ade:	ec51 0b18 	vmov	r0, r1, d8
 8007ae2:	f7f8 fd91 	bl	8000608 <__aeabi_dmul>
 8007ae6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007aea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4680      	mov	r8, r0
 8007af6:	4689      	mov	r9, r1
 8007af8:	f7f8 fd86 	bl	8000608 <__aeabi_dmul>
 8007afc:	a360      	add	r3, pc, #384	; (adr r3, 8007c80 <__ieee754_log+0x320>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	4606      	mov	r6, r0
 8007b04:	460f      	mov	r7, r1
 8007b06:	f7f8 fd7f 	bl	8000608 <__aeabi_dmul>
 8007b0a:	a35f      	add	r3, pc, #380	; (adr r3, 8007c88 <__ieee754_log+0x328>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f7f8 fbc4 	bl	800029c <__adddf3>
 8007b14:	4632      	mov	r2, r6
 8007b16:	463b      	mov	r3, r7
 8007b18:	f7f8 fd76 	bl	8000608 <__aeabi_dmul>
 8007b1c:	a35c      	add	r3, pc, #368	; (adr r3, 8007c90 <__ieee754_log+0x330>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f7f8 fbbb 	bl	800029c <__adddf3>
 8007b26:	4632      	mov	r2, r6
 8007b28:	463b      	mov	r3, r7
 8007b2a:	f7f8 fd6d 	bl	8000608 <__aeabi_dmul>
 8007b2e:	a35a      	add	r3, pc, #360	; (adr r3, 8007c98 <__ieee754_log+0x338>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 fbb2 	bl	800029c <__adddf3>
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	f7f8 fd64 	bl	8000608 <__aeabi_dmul>
 8007b40:	a357      	add	r3, pc, #348	; (adr r3, 8007ca0 <__ieee754_log+0x340>)
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	4680      	mov	r8, r0
 8007b48:	4689      	mov	r9, r1
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	f7f8 fd5b 	bl	8000608 <__aeabi_dmul>
 8007b52:	a355      	add	r3, pc, #340	; (adr r3, 8007ca8 <__ieee754_log+0x348>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fba0 	bl	800029c <__adddf3>
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	463b      	mov	r3, r7
 8007b60:	f7f8 fd52 	bl	8000608 <__aeabi_dmul>
 8007b64:	a352      	add	r3, pc, #328	; (adr r3, 8007cb0 <__ieee754_log+0x350>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fb97 	bl	800029c <__adddf3>
 8007b6e:	4632      	mov	r2, r6
 8007b70:	463b      	mov	r3, r7
 8007b72:	f7f8 fd49 	bl	8000608 <__aeabi_dmul>
 8007b76:	460b      	mov	r3, r1
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	f7f8 fb8d 	bl	800029c <__adddf3>
 8007b82:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	3551      	adds	r5, #81	; 0x51
 8007b8a:	431d      	orrs	r5, r3
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	dd48      	ble.n	8007c26 <__ieee754_log+0x2c6>
 8007b94:	4b4e      	ldr	r3, [pc, #312]	; (8007cd0 <__ieee754_log+0x370>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	4650      	mov	r0, sl
 8007b9a:	4659      	mov	r1, fp
 8007b9c:	f7f8 fd34 	bl	8000608 <__aeabi_dmul>
 8007ba0:	4652      	mov	r2, sl
 8007ba2:	465b      	mov	r3, fp
 8007ba4:	f7f8 fd30 	bl	8000608 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4606      	mov	r6, r0
 8007bae:	460f      	mov	r7, r1
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	f7f8 fb72 	bl	800029c <__adddf3>
 8007bb8:	ec53 2b18 	vmov	r2, r3, d8
 8007bbc:	f7f8 fd24 	bl	8000608 <__aeabi_dmul>
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	4689      	mov	r9, r1
 8007bc4:	b964      	cbnz	r4, 8007be0 <__ieee754_log+0x280>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 fb63 	bl	8000298 <__aeabi_dsub>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	4659      	mov	r1, fp
 8007bda:	f7f8 fb5d 	bl	8000298 <__aeabi_dsub>
 8007bde:	e6d6      	b.n	800798e <__ieee754_log+0x2e>
 8007be0:	a321      	add	r3, pc, #132	; (adr r3, 8007c68 <__ieee754_log+0x308>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	ec51 0b19 	vmov	r0, r1, d9
 8007bea:	f7f8 fd0d 	bl	8000608 <__aeabi_dmul>
 8007bee:	a320      	add	r3, pc, #128	; (adr r3, 8007c70 <__ieee754_log+0x310>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	ec51 0b19 	vmov	r0, r1, d9
 8007bfc:	f7f8 fd04 	bl	8000608 <__aeabi_dmul>
 8007c00:	4642      	mov	r2, r8
 8007c02:	464b      	mov	r3, r9
 8007c04:	f7f8 fb4a 	bl	800029c <__adddf3>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	4639      	mov	r1, r7
 8007c10:	f7f8 fb42 	bl	8000298 <__aeabi_dsub>
 8007c14:	4652      	mov	r2, sl
 8007c16:	465b      	mov	r3, fp
 8007c18:	f7f8 fb3e 	bl	8000298 <__aeabi_dsub>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4620      	mov	r0, r4
 8007c22:	4629      	mov	r1, r5
 8007c24:	e7d9      	b.n	8007bda <__ieee754_log+0x27a>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	4659      	mov	r1, fp
 8007c2e:	f7f8 fb33 	bl	8000298 <__aeabi_dsub>
 8007c32:	ec53 2b18 	vmov	r2, r3, d8
 8007c36:	f7f8 fce7 	bl	8000608 <__aeabi_dmul>
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	2c00      	cmp	r4, #0
 8007c40:	f43f af23 	beq.w	8007a8a <__ieee754_log+0x12a>
 8007c44:	a308      	add	r3, pc, #32	; (adr r3, 8007c68 <__ieee754_log+0x308>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	ec51 0b19 	vmov	r0, r1, d9
 8007c4e:	f7f8 fcdb 	bl	8000608 <__aeabi_dmul>
 8007c52:	a307      	add	r3, pc, #28	; (adr r3, 8007c70 <__ieee754_log+0x310>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	ec51 0b19 	vmov	r0, r1, d9
 8007c60:	e727      	b.n	8007ab2 <__ieee754_log+0x152>
 8007c62:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007cb8 <__ieee754_log+0x358>
 8007c66:	e694      	b.n	8007992 <__ieee754_log+0x32>
 8007c68:	fee00000 	.word	0xfee00000
 8007c6c:	3fe62e42 	.word	0x3fe62e42
 8007c70:	35793c76 	.word	0x35793c76
 8007c74:	3dea39ef 	.word	0x3dea39ef
 8007c78:	55555555 	.word	0x55555555
 8007c7c:	3fd55555 	.word	0x3fd55555
 8007c80:	df3e5244 	.word	0xdf3e5244
 8007c84:	3fc2f112 	.word	0x3fc2f112
 8007c88:	96cb03de 	.word	0x96cb03de
 8007c8c:	3fc74664 	.word	0x3fc74664
 8007c90:	94229359 	.word	0x94229359
 8007c94:	3fd24924 	.word	0x3fd24924
 8007c98:	55555593 	.word	0x55555593
 8007c9c:	3fe55555 	.word	0x3fe55555
 8007ca0:	d078c69f 	.word	0xd078c69f
 8007ca4:	3fc39a09 	.word	0x3fc39a09
 8007ca8:	1d8e78af 	.word	0x1d8e78af
 8007cac:	3fcc71c5 	.word	0x3fcc71c5
 8007cb0:	9997fa04 	.word	0x9997fa04
 8007cb4:	3fd99999 	.word	0x3fd99999
	...
 8007cc0:	c3500000 	.word	0xc3500000
 8007cc4:	43500000 	.word	0x43500000
 8007cc8:	7fefffff 	.word	0x7fefffff
 8007ccc:	3ff00000 	.word	0x3ff00000
 8007cd0:	3fe00000 	.word	0x3fe00000
 8007cd4:	00000000 	.word	0x00000000

08007cd8 <nan>:
 8007cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ce0 <nan+0x8>
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	00000000 	.word	0x00000000
 8007ce4:	7ff80000 	.word	0x7ff80000

08007ce8 <_init>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	bf00      	nop
 8007cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cee:	bc08      	pop	{r3}
 8007cf0:	469e      	mov	lr, r3
 8007cf2:	4770      	bx	lr

08007cf4 <_fini>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr
